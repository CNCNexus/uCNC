/*
	Name: mcumap_stm32f10x.h
	Description: Contains all MCU and PIN definitions for STM32F10x to run µCNC.

	Copyright: Copyright (c) João Martins
	Author: João Martins
	Date: 04-02-2020

	µCNC is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version. Please see <http://www.gnu.org/licenses/>

	µCNC is distributed WITHOUT ANY WARRANTY;
	Also without the implied warranty of	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	See the	GNU General Public License for more details.
*/

#ifndef MCUMAP_SAMD21_H
#define MCUMAP_SAMD21_H

#ifdef __cplusplus
extern "C"
{
#endif

/*
	Generates all the interface definitions.
	This creates a middle HAL layer between the board IO pins and the AVR funtionalities
*/
/*
	MCU specific definitions and replacements
*/
#include "samd21.h"

//defines the frequency of the mcu
#ifndef F_CPU
#define F_CPU 48000000UL
#endif
//defines the maximum and minimum step rates
#define F_STEP_MAX 100000
#define F_STEP_MIN 4
//defines special mcu to access flash strings and arrays
#define __rom__
#define __romstr__
#define __romarr__ const char
#define rom_strptr *
#define rom_strcpy strcpy
#define rom_strncpy strncpy
#define rom_memcpy memcpy
#define rom_read_byte *

#ifdef SETTINGS_ADDRESS_OFFSET
#undef SETTINGS_ADDRESS_OFFSET
#endif
#define SETTINGS_ADDRESS_OFFSET 0xfc00

#ifdef USB_VCP
//if USB VCP is used force RX sync also
#define ENABLE_SYNC_TX
#define ENABLE_SYNC_RX
#endif

//Helper macros
#define __helper_ex__(left, mid, right) left##mid##right
#define __helper__(left, mid, right) __helper_ex__(left, mid, right)

//SAMD21 registers
#define PORTREG_A (PORT->Group[0])
#define PORTREG_B (PORT->Group[1])
#define _PORTREG(X) (PORTREG_##X)
#define PORTREG(X) (_PORTREG(X))

/**********************************************
*	Autogenerated macros
**********************************************/

/**********************************************
*	IO Pins
**********************************************/
#if (defined(STEP0_PORT) && defined(STEP0_BIT))
#define STEP0 0
#define STEP0_GPIO (PORTREG(STEP0_PORT))
#define DIO0 0
#define DIO0_PORT STEP0_PORT
#define DIO0_BIT STEP0_BIT
#define DIO0_GPIO STEP0_GPIO
#endif
#if (defined(STEP1_PORT) && defined(STEP1_BIT))
#define STEP1 0
#define STEP1_GPIO (PORTREG(STEP1_PORT))
#define DIO1 0
#define DIO1_PORT STEP1_PORT
#define DIO1_BIT STEP1_BIT
#define DIO1_GPIO STEP1_GPIO
#endif
#if (defined(STEP2_PORT) && defined(STEP2_BIT))
#define STEP2 0
#define STEP2_GPIO (PORTREG(STEP2_PORT))
#define DIO2 0
#define DIO2_PORT STEP2_PORT
#define DIO2_BIT STEP2_BIT
#define DIO2_GPIO STEP2_GPIO
#endif
#if (defined(STEP3_PORT) && defined(STEP3_BIT))
#define STEP3 0
#define STEP3_GPIO (PORTREG(STEP3_PORT))
#define DIO3 0
#define DIO3_PORT STEP3_PORT
#define DIO3_BIT STEP3_BIT
#define DIO3_GPIO STEP3_GPIO
#endif
#if (defined(STEP4_PORT) && defined(STEP4_BIT))
#define STEP4 0
#define STEP4_GPIO (PORTREG(STEP4_PORT))
#define DIO4 0
#define DIO4_PORT STEP4_PORT
#define DIO4_BIT STEP4_BIT
#define DIO4_GPIO STEP4_GPIO
#endif
#if (defined(STEP5_PORT) && defined(STEP5_BIT))
#define STEP5 0
#define STEP5_GPIO (PORTREG(STEP5_PORT))
#define DIO5 0
#define DIO5_PORT STEP5_PORT
#define DIO5_BIT STEP5_BIT
#define DIO5_GPIO STEP5_GPIO
#endif
#if (defined(STEP6_PORT) && defined(STEP6_BIT))
#define STEP6 0
#define STEP6_GPIO (PORTREG(STEP6_PORT))
#define DIO6 0
#define DIO6_PORT STEP6_PORT
#define DIO6_BIT STEP6_BIT
#define DIO6_GPIO STEP6_GPIO
#endif
#if (defined(STEP7_PORT) && defined(STEP7_BIT))
#define STEP7 0
#define STEP7_GPIO (PORTREG(STEP7_PORT))
#define DIO7 0
#define DIO7_PORT STEP7_PORT
#define DIO7_BIT STEP7_BIT
#define DIO7_GPIO STEP7_GPIO
#endif
#if (defined(DIR0_PORT) && defined(DIR0_BIT))
#define DIR0 0
#define DIR0_GPIO (PORTREG(DIR0_PORT))
#define DIO8 0
#define DIO8_PORT DIR0_PORT
#define DIO8_BIT DIR0_BIT
#define DIO8_GPIO DIR0_GPIO
#endif
#if (defined(DIR1_PORT) && defined(DIR1_BIT))
#define DIR1 0
#define DIR1_GPIO (PORTREG(DIR1_PORT))
#define DIO9 0
#define DIO9_PORT DIR1_PORT
#define DIO9_BIT DIR1_BIT
#define DIO9_GPIO DIR1_GPIO
#endif
#if (defined(DIR2_PORT) && defined(DIR2_BIT))
#define DIR2 0
#define DIR2_GPIO (PORTREG(DIR2_PORT))
#define DIO10 0
#define DIO10_PORT DIR2_PORT
#define DIO10_BIT DIR2_BIT
#define DIO10_GPIO DIR2_GPIO
#endif
#if (defined(DIR3_PORT) && defined(DIR3_BIT))
#define DIR3 0
#define DIR3_GPIO (PORTREG(DIR3_PORT))
#define DIO11 0
#define DIO11_PORT DIR3_PORT
#define DIO11_BIT DIR3_BIT
#define DIO11_GPIO DIR3_GPIO
#endif
#if (defined(DIR4_PORT) && defined(DIR4_BIT))
#define DIR4 0
#define DIR4_GPIO (PORTREG(DIR4_PORT))
#define DIO12 0
#define DIO12_PORT DIR4_PORT
#define DIO12_BIT DIR4_BIT
#define DIO12_GPIO DIR4_GPIO
#endif
#if (defined(DIR5_PORT) && defined(DIR5_BIT))
#define DIR5 0
#define DIR5_GPIO (PORTREG(DIR5_PORT))
#define DIO13 0
#define DIO13_PORT DIR5_PORT
#define DIO13_BIT DIR5_BIT
#define DIO13_GPIO DIR5_GPIO
#endif
#if (defined(STEPPER_ENABLE0_PORT) && defined(STEPPER_ENABLE0_BIT))
#define STEPPER_ENABLE0 0
#define STEPPER_ENABLE0_GPIO (PORTREG(STEPPER_ENABLE0_PORT))
#define DIO14 0
#define DIO14_PORT STEPPER_ENABLE0_PORT
#define DIO14_BIT STEPPER_ENABLE0_BIT
#define DIO14_GPIO STEPPER_ENABLE0_GPIO
#endif
#if (defined(STEPPER_ENABLE1_PORT) && defined(STEPPER_ENABLE1_BIT))
#define STEPPER_ENABLE1 0
#define STEPPER_ENABLE1_GPIO (PORTREG(STEPPER_ENABLE1_PORT))
#define DIO15 0
#define DIO15_PORT STEPPER_ENABLE1_PORT
#define DIO15_BIT STEPPER_ENABLE1_BIT
#define DIO15_GPIO STEPPER_ENABLE1_GPIO
#endif
#if (defined(STEPPER_ENABLE2_PORT) && defined(STEPPER_ENABLE2_BIT))
#define STEPPER_ENABLE2 0
#define STEPPER_ENABLE2_GPIO (PORTREG(STEPPER_ENABLE2_PORT))
#define DIO16 0
#define DIO16_PORT STEPPER_ENABLE2_PORT
#define DIO16_BIT STEPPER_ENABLE2_BIT
#define DIO16_GPIO STEPPER_ENABLE2_GPIO
#endif
#if (defined(STEPPER_ENABLE3_PORT) && defined(STEPPER_ENABLE3_BIT))
#define STEPPER_ENABLE3 0
#define STEPPER_ENABLE3_GPIO (PORTREG(STEPPER_ENABLE3_PORT))
#define DIO17 0
#define DIO17_PORT STEPPER_ENABLE3_PORT
#define DIO17_BIT STEPPER_ENABLE3_BIT
#define DIO17_GPIO STEPPER_ENABLE3_GPIO
#endif
#if (defined(STEPPER_ENABLE4_PORT) && defined(STEPPER_ENABLE4_BIT))
#define STEPPER_ENABLE4 0
#define STEPPER_ENABLE4_GPIO (PORTREG(STEPPER_ENABLE4_PORT))
#define DIO18 0
#define DIO18_PORT STEPPER_ENABLE4_PORT
#define DIO18_BIT STEPPER_ENABLE4_BIT
#define DIO18_GPIO STEPPER_ENABLE4_GPIO
#endif
#if (defined(STEPPER_ENABLE5_PORT) && defined(STEPPER_ENABLE5_BIT))
#define STEPPER_ENABLE5 0
#define STEPPER_ENABLE5_GPIO (PORTREG(STEPPER_ENABLE5_PORT))
#define DIO19 0
#define DIO19_PORT STEPPER_ENABLE5_PORT
#define DIO19_BIT STEPPER_ENABLE5_BIT
#define DIO19_GPIO STEPPER_ENABLE5_GPIO
#endif
#if (defined(PWM0_PORT) && defined(PWM0_BIT))
#define PWM0 0
#define PWM0_GPIO (PORTREG(PWM0_PORT))
#define DIO20 0
#define DIO20_PORT PWM0_PORT
#define DIO20_BIT PWM0_BIT
#define DIO20_GPIO PWM0_GPIO
#endif
#if (defined(PWM1_PORT) && defined(PWM1_BIT))
#define PWM1 0
#define PWM1_GPIO (PORTREG(PWM1_PORT))
#define DIO21 0
#define DIO21_PORT PWM1_PORT
#define DIO21_BIT PWM1_BIT
#define DIO21_GPIO PWM1_GPIO
#endif
#if (defined(PWM2_PORT) && defined(PWM2_BIT))
#define PWM2 0
#define PWM2_GPIO (PORTREG(PWM2_PORT))
#define DIO22 0
#define DIO22_PORT PWM2_PORT
#define DIO22_BIT PWM2_BIT
#define DIO22_GPIO PWM2_GPIO
#endif
#if (defined(PWM3_PORT) && defined(PWM3_BIT))
#define PWM3 0
#define PWM3_GPIO (PORTREG(PWM3_PORT))
#define DIO23 0
#define DIO23_PORT PWM3_PORT
#define DIO23_BIT PWM3_BIT
#define DIO23_GPIO PWM3_GPIO
#endif
#if (defined(PWM4_PORT) && defined(PWM4_BIT))
#define PWM4 0
#define PWM4_GPIO (PORTREG(PWM4_PORT))
#define DIO24 0
#define DIO24_PORT PWM4_PORT
#define DIO24_BIT PWM4_BIT
#define DIO24_GPIO PWM4_GPIO
#endif
#if (defined(PWM5_PORT) && defined(PWM5_BIT))
#define PWM5 0
#define PWM5_GPIO (PORTREG(PWM5_PORT))
#define DIO25 0
#define DIO25_PORT PWM5_PORT
#define DIO25_BIT PWM5_BIT
#define DIO25_GPIO PWM5_GPIO
#endif
#if (defined(PWM6_PORT) && defined(PWM6_BIT))
#define PWM6 0
#define PWM6_GPIO (PORTREG(PWM6_PORT))
#define DIO26 0
#define DIO26_PORT PWM6_PORT
#define DIO26_BIT PWM6_BIT
#define DIO26_GPIO PWM6_GPIO
#endif
#if (defined(PWM7_PORT) && defined(PWM7_BIT))
#define PWM7 0
#define PWM7_GPIO (PORTREG(PWM7_PORT))
#define DIO27 0
#define DIO27_PORT PWM7_PORT
#define DIO27_BIT PWM7_BIT
#define DIO27_GPIO PWM7_GPIO
#endif
#if (defined(PWM8_PORT) && defined(PWM8_BIT))
#define PWM8 0
#define PWM8_GPIO (PORTREG(PWM8_PORT))
#define DIO28 0
#define DIO28_PORT PWM8_PORT
#define DIO28_BIT PWM8_BIT
#define DIO28_GPIO PWM8_GPIO
#endif
#if (defined(PWM9_PORT) && defined(PWM9_BIT))
#define PWM9 0
#define PWM9_GPIO (PORTREG(PWM9_PORT))
#define DIO29 0
#define DIO29_PORT PWM9_PORT
#define DIO29_BIT PWM9_BIT
#define DIO29_GPIO PWM9_GPIO
#endif
#if (defined(PWM10_PORT) && defined(PWM10_BIT))
#define PWM10 0
#define PWM10_GPIO (PORTREG(PWM10_PORT))
#define DIO30 0
#define DIO30_PORT PWM10_PORT
#define DIO30_BIT PWM10_BIT
#define DIO30_GPIO PWM10_GPIO
#endif
#if (defined(PWM11_PORT) && defined(PWM11_BIT))
#define PWM11 0
#define PWM11_GPIO (PORTREG(PWM11_PORT))
#define DIO31 0
#define DIO31_PORT PWM11_PORT
#define DIO31_BIT PWM11_BIT
#define DIO31_GPIO PWM11_GPIO
#endif
#if (defined(PWM12_PORT) && defined(PWM12_BIT))
#define PWM12 0
#define PWM12_GPIO (PORTREG(PWM12_PORT))
#define DIO32 0
#define DIO32_PORT PWM12_PORT
#define DIO32_BIT PWM12_BIT
#define DIO32_GPIO PWM12_GPIO
#endif
#if (defined(PWM13_PORT) && defined(PWM13_BIT))
#define PWM13 0
#define PWM13_GPIO (PORTREG(PWM13_PORT))
#define DIO33 0
#define DIO33_PORT PWM13_PORT
#define DIO33_BIT PWM13_BIT
#define DIO33_GPIO PWM13_GPIO
#endif
#if (defined(PWM14_PORT) && defined(PWM14_BIT))
#define PWM14 0
#define PWM14_GPIO (PORTREG(PWM14_PORT))
#define DIO34 0
#define DIO34_PORT PWM14_PORT
#define DIO34_BIT PWM14_BIT
#define DIO34_GPIO PWM14_GPIO
#endif
#if (defined(PWM15_PORT) && defined(PWM15_BIT))
#define PWM15 0
#define PWM15_GPIO (PORTREG(PWM15_PORT))
#define DIO35 0
#define DIO35_PORT PWM15_PORT
#define DIO35_BIT PWM15_BIT
#define DIO35_GPIO PWM15_GPIO
#endif
#if (defined(DOUT0_PORT) && defined(DOUT0_BIT))
#define DOUT0 0
#define DOUT0_GPIO (PORTREG(DOUT0_PORT))
#define DIO36 0
#define DIO36_PORT DOUT0_PORT
#define DIO36_BIT DOUT0_BIT
#define DIO36_GPIO DOUT0_GPIO
#endif
#if (defined(DOUT1_PORT) && defined(DOUT1_BIT))
#define DOUT1 0
#define DOUT1_GPIO (PORTREG(DOUT1_PORT))
#define DIO37 0
#define DIO37_PORT DOUT1_PORT
#define DIO37_BIT DOUT1_BIT
#define DIO37_GPIO DOUT1_GPIO
#endif
#if (defined(DOUT2_PORT) && defined(DOUT2_BIT))
#define DOUT2 0
#define DOUT2_GPIO (PORTREG(DOUT2_PORT))
#define DIO38 0
#define DIO38_PORT DOUT2_PORT
#define DIO38_BIT DOUT2_BIT
#define DIO38_GPIO DOUT2_GPIO
#endif
#if (defined(DOUT3_PORT) && defined(DOUT3_BIT))
#define DOUT3 0
#define DOUT3_GPIO (PORTREG(DOUT3_PORT))
#define DIO39 0
#define DIO39_PORT DOUT3_PORT
#define DIO39_BIT DOUT3_BIT
#define DIO39_GPIO DOUT3_GPIO
#endif
#if (defined(DOUT4_PORT) && defined(DOUT4_BIT))
#define DOUT4 0
#define DOUT4_GPIO (PORTREG(DOUT4_PORT))
#define DIO40 0
#define DIO40_PORT DOUT4_PORT
#define DIO40_BIT DOUT4_BIT
#define DIO40_GPIO DOUT4_GPIO
#endif
#if (defined(DOUT5_PORT) && defined(DOUT5_BIT))
#define DOUT5 0
#define DOUT5_GPIO (PORTREG(DOUT5_PORT))
#define DIO41 0
#define DIO41_PORT DOUT5_PORT
#define DIO41_BIT DOUT5_BIT
#define DIO41_GPIO DOUT5_GPIO
#endif
#if (defined(DOUT6_PORT) && defined(DOUT6_BIT))
#define DOUT6 0
#define DOUT6_GPIO (PORTREG(DOUT6_PORT))
#define DIO42 0
#define DIO42_PORT DOUT6_PORT
#define DIO42_BIT DOUT6_BIT
#define DIO42_GPIO DOUT6_GPIO
#endif
#if (defined(DOUT7_PORT) && defined(DOUT7_BIT))
#define DOUT7 0
#define DOUT7_GPIO (PORTREG(DOUT7_PORT))
#define DIO43 0
#define DIO43_PORT DOUT7_PORT
#define DIO43_BIT DOUT7_BIT
#define DIO43_GPIO DOUT7_GPIO
#endif
#if (defined(DOUT8_PORT) && defined(DOUT8_BIT))
#define DOUT8 0
#define DOUT8_GPIO (PORTREG(DOUT8_PORT))
#define DIO44 0
#define DIO44_PORT DOUT8_PORT
#define DIO44_BIT DOUT8_BIT
#define DIO44_GPIO DOUT8_GPIO
#endif
#if (defined(DOUT9_PORT) && defined(DOUT9_BIT))
#define DOUT9 0
#define DOUT9_GPIO (PORTREG(DOUT9_PORT))
#define DIO45 0
#define DIO45_PORT DOUT9_PORT
#define DIO45_BIT DOUT9_BIT
#define DIO45_GPIO DOUT9_GPIO
#endif
#if (defined(DOUT10_PORT) && defined(DOUT10_BIT))
#define DOUT10 0
#define DOUT10_GPIO (PORTREG(DOUT10_PORT))
#define DIO46 0
#define DIO46_PORT DOUT10_PORT
#define DIO46_BIT DOUT10_BIT
#define DIO46_GPIO DOUT10_GPIO
#endif
#if (defined(DOUT11_PORT) && defined(DOUT11_BIT))
#define DOUT11 0
#define DOUT11_GPIO (PORTREG(DOUT11_PORT))
#define DIO47 0
#define DIO47_PORT DOUT11_PORT
#define DIO47_BIT DOUT11_BIT
#define DIO47_GPIO DOUT11_GPIO
#endif
#if (defined(DOUT12_PORT) && defined(DOUT12_BIT))
#define DOUT12 0
#define DOUT12_GPIO (PORTREG(DOUT12_PORT))
#define DIO48 0
#define DIO48_PORT DOUT12_PORT
#define DIO48_BIT DOUT12_BIT
#define DIO48_GPIO DOUT12_GPIO
#endif
#if (defined(DOUT13_PORT) && defined(DOUT13_BIT))
#define DOUT13 0
#define DOUT13_GPIO (PORTREG(DOUT13_PORT))
#define DIO49 0
#define DIO49_PORT DOUT13_PORT
#define DIO49_BIT DOUT13_BIT
#define DIO49_GPIO DOUT13_GPIO
#endif
#if (defined(DOUT14_PORT) && defined(DOUT14_BIT))
#define DOUT14 0
#define DOUT14_GPIO (PORTREG(DOUT14_PORT))
#define DIO50 0
#define DIO50_PORT DOUT14_PORT
#define DIO50_BIT DOUT14_BIT
#define DIO50_GPIO DOUT14_GPIO
#endif
#if (defined(DOUT15_PORT) && defined(DOUT15_BIT))
#define DOUT15 0
#define DOUT15_GPIO (PORTREG(DOUT15_PORT))
#define DIO51 0
#define DIO51_PORT DOUT15_PORT
#define DIO51_BIT DOUT15_BIT
#define DIO51_GPIO DOUT15_GPIO
#endif
#if (defined(LIMIT_X_PORT) && defined(LIMIT_X_BIT))
#define LIMIT_X 0
#define LIMIT_X_GPIO (PORTREG(LIMIT_X_PORT))
#define DIO52 0
#define DIO52_PORT LIMIT_X_PORT
#define DIO52_BIT LIMIT_X_BIT
#define DIO52_GPIO LIMIT_X_GPIO
#endif
#if (defined(LIMIT_Y_PORT) && defined(LIMIT_Y_BIT))
#define LIMIT_Y 0
#define LIMIT_Y_GPIO (PORTREG(LIMIT_Y_PORT))
#define DIO53 0
#define DIO53_PORT LIMIT_Y_PORT
#define DIO53_BIT LIMIT_Y_BIT
#define DIO53_GPIO LIMIT_Y_GPIO
#endif
#if (defined(LIMIT_Z_PORT) && defined(LIMIT_Z_BIT))
#define LIMIT_Z 0
#define LIMIT_Z_GPIO (PORTREG(LIMIT_Z_PORT))
#define DIO54 0
#define DIO54_PORT LIMIT_Z_PORT
#define DIO54_BIT LIMIT_Z_BIT
#define DIO54_GPIO LIMIT_Z_GPIO
#endif
#if (defined(LIMIT_X2_PORT) && defined(LIMIT_X2_BIT))
#define LIMIT_X2 0
#define LIMIT_X2_GPIO (PORTREG(LIMIT_X2_PORT))
#define DIO55 0
#define DIO55_PORT LIMIT_X2_PORT
#define DIO55_BIT LIMIT_X2_BIT
#define DIO55_GPIO LIMIT_X2_GPIO
#endif
#if (defined(LIMIT_Y2_PORT) && defined(LIMIT_Y2_BIT))
#define LIMIT_Y2 0
#define LIMIT_Y2_GPIO (PORTREG(LIMIT_Y2_PORT))
#define DIO56 0
#define DIO56_PORT LIMIT_Y2_PORT
#define DIO56_BIT LIMIT_Y2_BIT
#define DIO56_GPIO LIMIT_Y2_GPIO
#endif
#if (defined(LIMIT_Z2_PORT) && defined(LIMIT_Z2_BIT))
#define LIMIT_Z2 0
#define LIMIT_Z2_GPIO (PORTREG(LIMIT_Z2_PORT))
#define DIO57 0
#define DIO57_PORT LIMIT_Z2_PORT
#define DIO57_BIT LIMIT_Z2_BIT
#define DIO57_GPIO LIMIT_Z2_GPIO
#endif
#if (defined(LIMIT_A_PORT) && defined(LIMIT_A_BIT))
#define LIMIT_A 0
#define LIMIT_A_GPIO (PORTREG(LIMIT_A_PORT))
#define DIO58 0
#define DIO58_PORT LIMIT_A_PORT
#define DIO58_BIT LIMIT_A_BIT
#define DIO58_GPIO LIMIT_A_GPIO
#endif
#if (defined(LIMIT_B_PORT) && defined(LIMIT_B_BIT))
#define LIMIT_B 0
#define LIMIT_B_GPIO (PORTREG(LIMIT_B_PORT))
#define DIO59 0
#define DIO59_PORT LIMIT_B_PORT
#define DIO59_BIT LIMIT_B_BIT
#define DIO59_GPIO LIMIT_B_GPIO
#endif
#if (defined(LIMIT_C_PORT) && defined(LIMIT_C_BIT))
#define LIMIT_C 0
#define LIMIT_C_GPIO (PORTREG(LIMIT_C_PORT))
#define DIO60 0
#define DIO60_PORT LIMIT_C_PORT
#define DIO60_BIT LIMIT_C_BIT
#define DIO60_GPIO LIMIT_C_GPIO
#endif
#if (defined(PROBE_PORT) && defined(PROBE_BIT))
#define PROBE 0
#define PROBE_GPIO (PORTREG(PROBE_PORT))
#define DIO61 0
#define DIO61_PORT PROBE_PORT
#define DIO61_BIT PROBE_BIT
#define DIO61_GPIO PROBE_GPIO
#endif
#if (defined(ESTOP_PORT) && defined(ESTOP_BIT))
#define ESTOP 0
#define ESTOP_GPIO (PORTREG(ESTOP_PORT))
#define DIO62 0
#define DIO62_PORT ESTOP_PORT
#define DIO62_BIT ESTOP_BIT
#define DIO62_GPIO ESTOP_GPIO
#endif
#if (defined(SAFETY_DOOR_PORT) && defined(SAFETY_DOOR_BIT))
#define SAFETY_DOOR 0
#define SAFETY_DOOR_GPIO (PORTREG(SAFETY_DOOR_PORT))
#define DIO63 0
#define DIO63_PORT SAFETY_DOOR_PORT
#define DIO63_BIT SAFETY_DOOR_BIT
#define DIO63_GPIO SAFETY_DOOR_GPIO
#endif
#if (defined(FHOLD_PORT) && defined(FHOLD_BIT))
#define FHOLD 0
#define FHOLD_GPIO (PORTREG(FHOLD_PORT))
#define DIO64 0
#define DIO64_PORT FHOLD_PORT
#define DIO64_BIT FHOLD_BIT
#define DIO64_GPIO FHOLD_GPIO
#endif
#if (defined(CS_RES_PORT) && defined(CS_RES_BIT))
#define CS_RES 0
#define CS_RES_GPIO (PORTREG(CS_RES_PORT))
#define DIO65 0
#define DIO65_PORT CS_RES_PORT
#define DIO65_BIT CS_RES_BIT
#define DIO65_GPIO CS_RES_GPIO
#endif
#if (defined(ANALOG0_PORT) && defined(ANALOG0_BIT))
#define ANALOG0 0
#define ANALOG0_GPIO (PORTREG(ANALOG0_PORT))
#define DIO66 0
#define DIO66_PORT ANALOG0_PORT
#define DIO66_BIT ANALOG0_BIT
#define DIO66_GPIO ANALOG0_GPIO
#endif
#if (defined(ANALOG1_PORT) && defined(ANALOG1_BIT))
#define ANALOG1 0
#define ANALOG1_GPIO (PORTREG(ANALOG1_PORT))
#define DIO67 0
#define DIO67_PORT ANALOG1_PORT
#define DIO67_BIT ANALOG1_BIT
#define DIO67_GPIO ANALOG1_GPIO
#endif
#if (defined(ANALOG2_PORT) && defined(ANALOG2_BIT))
#define ANALOG2 0
#define ANALOG2_GPIO (PORTREG(ANALOG2_PORT))
#define DIO68 0
#define DIO68_PORT ANALOG2_PORT
#define DIO68_BIT ANALOG2_BIT
#define DIO68_GPIO ANALOG2_GPIO
#endif
#if (defined(ANALOG3_PORT) && defined(ANALOG3_BIT))
#define ANALOG3 0
#define ANALOG3_GPIO (PORTREG(ANALOG3_PORT))
#define DIO69 0
#define DIO69_PORT ANALOG3_PORT
#define DIO69_BIT ANALOG3_BIT
#define DIO69_GPIO ANALOG3_GPIO
#endif
#if (defined(ANALOG4_PORT) && defined(ANALOG4_BIT))
#define ANALOG4 0
#define ANALOG4_GPIO (PORTREG(ANALOG4_PORT))
#define DIO70 0
#define DIO70_PORT ANALOG4_PORT
#define DIO70_BIT ANALOG4_BIT
#define DIO70_GPIO ANALOG4_GPIO
#endif
#if (defined(ANALOG5_PORT) && defined(ANALOG5_BIT))
#define ANALOG5 0
#define ANALOG5_GPIO (PORTREG(ANALOG5_PORT))
#define DIO71 0
#define DIO71_PORT ANALOG5_PORT
#define DIO71_BIT ANALOG5_BIT
#define DIO71_GPIO ANALOG5_GPIO
#endif
#if (defined(ANALOG6_PORT) && defined(ANALOG6_BIT))
#define ANALOG6 0
#define ANALOG6_GPIO (PORTREG(ANALOG6_PORT))
#define DIO72 0
#define DIO72_PORT ANALOG6_PORT
#define DIO72_BIT ANALOG6_BIT
#define DIO72_GPIO ANALOG6_GPIO
#endif
#if (defined(ANALOG7_PORT) && defined(ANALOG7_BIT))
#define ANALOG7 0
#define ANALOG7_GPIO (PORTREG(ANALOG7_PORT))
#define DIO73 0
#define DIO73_PORT ANALOG7_PORT
#define DIO73_BIT ANALOG7_BIT
#define DIO73_GPIO ANALOG7_GPIO
#endif
#if (defined(ANALOG8_PORT) && defined(ANALOG8_BIT))
#define ANALOG8 0
#define ANALOG8_GPIO (PORTREG(ANALOG8_PORT))
#define DIO74 0
#define DIO74_PORT ANALOG8_PORT
#define DIO74_BIT ANALOG8_BIT
#define DIO74_GPIO ANALOG8_GPIO
#endif
#if (defined(ANALOG9_PORT) && defined(ANALOG9_BIT))
#define ANALOG9 0
#define ANALOG9_GPIO (PORTREG(ANALOG9_PORT))
#define DIO75 0
#define DIO75_PORT ANALOG9_PORT
#define DIO75_BIT ANALOG9_BIT
#define DIO75_GPIO ANALOG9_GPIO
#endif
#if (defined(ANALOG10_PORT) && defined(ANALOG10_BIT))
#define ANALOG10 0
#define ANALOG10_GPIO (PORTREG(ANALOG10_PORT))
#define DIO76 0
#define DIO76_PORT ANALOG10_PORT
#define DIO76_BIT ANALOG10_BIT
#define DIO76_GPIO ANALOG10_GPIO
#endif
#if (defined(ANALOG11_PORT) && defined(ANALOG11_BIT))
#define ANALOG11 0
#define ANALOG11_GPIO (PORTREG(ANALOG11_PORT))
#define DIO77 0
#define DIO77_PORT ANALOG11_PORT
#define DIO77_BIT ANALOG11_BIT
#define DIO77_GPIO ANALOG11_GPIO
#endif
#if (defined(ANALOG12_PORT) && defined(ANALOG12_BIT))
#define ANALOG12 0
#define ANALOG12_GPIO (PORTREG(ANALOG12_PORT))
#define DIO78 0
#define DIO78_PORT ANALOG12_PORT
#define DIO78_BIT ANALOG12_BIT
#define DIO78_GPIO ANALOG12_GPIO
#endif
#if (defined(ANALOG13_PORT) && defined(ANALOG13_BIT))
#define ANALOG13 0
#define ANALOG13_GPIO (PORTREG(ANALOG13_PORT))
#define DIO79 0
#define DIO79_PORT ANALOG13_PORT
#define DIO79_BIT ANALOG13_BIT
#define DIO79_GPIO ANALOG13_GPIO
#endif
#if (defined(ANALOG14_PORT) && defined(ANALOG14_BIT))
#define ANALOG14 0
#define ANALOG14_GPIO (PORTREG(ANALOG14_PORT))
#define DIO80 0
#define DIO80_PORT ANALOG14_PORT
#define DIO80_BIT ANALOG14_BIT
#define DIO80_GPIO ANALOG14_GPIO
#endif
#if (defined(ANALOG15_PORT) && defined(ANALOG15_BIT))
#define ANALOG15 0
#define ANALOG15_GPIO (PORTREG(ANALOG15_PORT))
#define DIO81 0
#define DIO81_PORT ANALOG15_PORT
#define DIO81_BIT ANALOG15_BIT
#define DIO81_GPIO ANALOG15_GPIO
#endif
#if (defined(DIN0_PORT) && defined(DIN0_BIT))
#define DIN0 0
#define DIN0_GPIO (PORTREG(DIN0_PORT))
#define DIO82 0
#define DIO82_PORT DIN0_PORT
#define DIO82_BIT DIN0_BIT
#define DIO82_GPIO DIN0_GPIO
#endif
#if (defined(DIN1_PORT) && defined(DIN1_BIT))
#define DIN1 0
#define DIN1_GPIO (PORTREG(DIN1_PORT))
#define DIO83 0
#define DIO83_PORT DIN1_PORT
#define DIO83_BIT DIN1_BIT
#define DIO83_GPIO DIN1_GPIO
#endif
#if (defined(DIN2_PORT) && defined(DIN2_BIT))
#define DIN2 0
#define DIN2_GPIO (PORTREG(DIN2_PORT))
#define DIO84 0
#define DIO84_PORT DIN2_PORT
#define DIO84_BIT DIN2_BIT
#define DIO84_GPIO DIN2_GPIO
#endif
#if (defined(DIN3_PORT) && defined(DIN3_BIT))
#define DIN3 0
#define DIN3_GPIO (PORTREG(DIN3_PORT))
#define DIO85 0
#define DIO85_PORT DIN3_PORT
#define DIO85_BIT DIN3_BIT
#define DIO85_GPIO DIN3_GPIO
#endif
#if (defined(DIN4_PORT) && defined(DIN4_BIT))
#define DIN4 0
#define DIN4_GPIO (PORTREG(DIN4_PORT))
#define DIO86 0
#define DIO86_PORT DIN4_PORT
#define DIO86_BIT DIN4_BIT
#define DIO86_GPIO DIN4_GPIO
#endif
#if (defined(DIN5_PORT) && defined(DIN5_BIT))
#define DIN5 0
#define DIN5_GPIO (PORTREG(DIN5_PORT))
#define DIO87 0
#define DIO87_PORT DIN5_PORT
#define DIO87_BIT DIN5_BIT
#define DIO87_GPIO DIN5_GPIO
#endif
#if (defined(DIN6_PORT) && defined(DIN6_BIT))
#define DIN6 0
#define DIN6_GPIO (PORTREG(DIN6_PORT))
#define DIO88 0
#define DIO88_PORT DIN6_PORT
#define DIO88_BIT DIN6_BIT
#define DIO88_GPIO DIN6_GPIO
#endif
#if (defined(DIN7_PORT) && defined(DIN7_BIT))
#define DIN7 0
#define DIN7_GPIO (PORTREG(DIN7_PORT))
#define DIO89 0
#define DIO89_PORT DIN7_PORT
#define DIO89_BIT DIN7_BIT
#define DIO89_GPIO DIN7_GPIO
#endif
#if (defined(DIN8_PORT) && defined(DIN8_BIT))
#define DIN8 0
#define DIN8_GPIO (PORTREG(DIN8_PORT))
#define DIO90 0
#define DIO90_PORT DIN8_PORT
#define DIO90_BIT DIN8_BIT
#define DIO90_GPIO DIN8_GPIO
#endif
#if (defined(DIN9_PORT) && defined(DIN9_BIT))
#define DIN9 0
#define DIN9_GPIO (PORTREG(DIN9_PORT))
#define DIO91 0
#define DIO91_PORT DIN9_PORT
#define DIO91_BIT DIN9_BIT
#define DIO91_GPIO DIN9_GPIO
#endif
#if (defined(DIN10_PORT) && defined(DIN10_BIT))
#define DIN10 0
#define DIN10_GPIO (PORTREG(DIN10_PORT))
#define DIO92 0
#define DIO92_PORT DIN10_PORT
#define DIO92_BIT DIN10_BIT
#define DIO92_GPIO DIN10_GPIO
#endif
#if (defined(DIN11_PORT) && defined(DIN11_BIT))
#define DIN11 0
#define DIN11_GPIO (PORTREG(DIN11_PORT))
#define DIO93 0
#define DIO93_PORT DIN11_PORT
#define DIO93_BIT DIN11_BIT
#define DIO93_GPIO DIN11_GPIO
#endif
#if (defined(DIN12_PORT) && defined(DIN12_BIT))
#define DIN12 0
#define DIN12_GPIO (PORTREG(DIN12_PORT))
#define DIO94 0
#define DIO94_PORT DIN12_PORT
#define DIO94_BIT DIN12_BIT
#define DIO94_GPIO DIN12_GPIO
#endif
#if (defined(DIN13_PORT) && defined(DIN13_BIT))
#define DIN13 0
#define DIN13_GPIO (PORTREG(DIN13_PORT))
#define DIO95 0
#define DIO95_PORT DIN13_PORT
#define DIO95_BIT DIN13_BIT
#define DIO95_GPIO DIN13_GPIO
#endif
#if (defined(DIN14_PORT) && defined(DIN14_BIT))
#define DIN14 0
#define DIN14_GPIO (PORTREG(DIN14_PORT))
#define DIO96 0
#define DIO96_PORT DIN14_PORT
#define DIO96_BIT DIN14_BIT
#define DIO96_GPIO DIN14_GPIO
#endif
#if (defined(DIN15_PORT) && defined(DIN15_BIT))
#define DIN15 0
#define DIN15_GPIO (PORTREG(DIN15_PORT))
#define DIO97 0
#define DIO97_PORT DIN15_PORT
#define DIO97_BIT DIN15_BIT
#define DIO97_GPIO DIN15_GPIO
#endif
#if (defined(TX_PORT) && defined(TX_BIT))
#define TX 0
#define TX_GPIO (PORTREG(TX_PORT))
#define DIO98 0
#define DIO98_PORT TX_PORT
#define DIO98_BIT TX_BIT
#define DIO98_GPIO TX_GPIO
#endif
#if (defined(RX_PORT) && defined(RX_BIT))
#define RX 0
#define RX_GPIO (PORTREG(RX_PORT))
#define DIO99 0
#define DIO99_PORT RX_PORT
#define DIO99_BIT RX_BIT
#define DIO99_GPIO RX_GPIO
#endif

#define __indirect__ex__(X, Y) DIO##X##_##Y
#define __indirect__(X, Y) __indirect__ex__(X, Y)

#ifndef BYTE_OPS
#define BYTE_OPS
// Set bit y in byte x
#define SETBIT(x, y) ((x) |= (1 << (y)))
// Clear bit y in byte x
#define CLEARBIT(x, y) ((x) &= ~(1 << (y)))
// Check bit y in byte x
#define CHECKBIT(x, y) ((x) & (1 << (y)))
// Toggle bit y in byte x
#define TOGGLEBIT(x, y) ((x) ^= (1 << (y)))
// Set byte y in byte x
#define SETFLAG(x, y) ((x) |= (y))
// Clear byte y in byte x
#define CLEARFLAG(x, y) ((x) &= ~(y))
// Check byte y in byte x
#define CHECKFLAG(x, y) ((x) & (y))
// Toggle byte y in byte x
#define TOGGLEFLAG(x, y) ((x) ^= (y))
#endif

#define mcu_config_output(diopin) (                                            \
	{                                                                          \
		SETBIT(__indirect__(diopin, GPIO).DIR.reg, __indirect__(diopin, BIT)); \
		__indirect__(diopin, GPIO).PINCFG[__indirect__(diopin, BIT)].reg = 0;  \
	})
#define mcu_config_input(diopin) (                                                   \
	{                                                                                \
		CLEARBIT(__indirect__(diopin, GPIO).DIR.reg, __indirect__(diopin, BIT));     \
		SETBIT(__indirect__(diopin, GPIO).PINCFG[__indirect__(diopin, BIT)].reg, 1); \
	})
#define mcu_config_pullup(diopin) (                                                  \
	{                                                                                \
		SETBIT(__indirect__(diopin, GPIO).PINCFG[__indirect__(diopin, BIT)].reg, 2); \
		SETBIT(__indirect__(diopin, GPIO).OUT.reg, __indirect__(diopin, BIT));       \
	})
#define mcu_config_analog(diopin) (                                              \
	{                                                                            \
		CLEARBIT(__indirect__(diopin, GPIO).DIR.reg, __indirect__(diopin, BIT)); \
		__indirect__(diopin, GPIO).PINCFG[__indirect__(diopin, BIT)].reg = 0;    \
	})

#define mcu_get_input(diopin) (CHECKBIT(__indirect__(diopin, GPIO).IN.reg, __indirect__(diopin, BIT)))
#define mcu_get_output(diopin) (CHECKBIT(__indirect__(diopin, GPIO).OUT.reg, __indirect__(diopin, BIT)))
#define mcu_set_output(diopin) (__indirect__(diopin, GPIO).OUTSET.reg = (1UL << __indirect__(diopin, BIT)))
#define mcu_clear_output(diopin) (__indirect__(diopin, GPIO).OUTCLR.reg = (1UL << __indirect__(diopin, BIT)))
#define mcu_toggle_output(diopin) (__indirect__(diopin, GPIO).OUTTGL.reg = (1UL << __indirect__(diopin, BIT)))
/*
#define mcu_set_pwm(diopin, pwmvalue)                                                                                                           \
	{                                                                                                                                           \
		__indirect__(diopin, TIMREG)->__indirect__(diopin, CCR) = (uint16_t)((((uint32_t)__indirect__(diopin, TIMREG)->ARR) * pwmvalue) / 255); \
	}
#define mcu_get_pwm(diopin) ((uint8_t)((((uint32_t)__indirect__(diopin, TIMREG)->__indirect__(diopin, CCR)) * 255) / ((uint32_t)__indirect__(diopin, TIMREG)->ARR)))
#ifdef PROBE
#ifdef PROBE_ISR
#define mcu_enable_probe_isr() SETBIT(EXTI->IMR, PROBE_BIT)
#define mcu_disable_probe_isr() CLEARBIT(EXTI->IMR, PROBE_BIT)
#else
#define mcu_enable_probe_isr()
#define mcu_disable_probe_isr()
#endif
#endif

#define mcu_enable_global_isr() __enable_irq()
#define mcu_disable_global_isr() __disable_irq()

// #ifdef COM_PORT
// #ifndef ENABLE_SYNC_TX
// #define mcu_enable_tx_isr() (COM_USART->CR1 |= (USART_CR1_TXEIE))
// #define mcu_disable_tx_isr() (COM_USART->CR1 &= ~(USART_CR1_TXEIE))
// #else
// #define mcu_enable_tx_isr()
// #define mcu_disable_tx_isr()
// #endif
// #else
// #define mcu_enable_tx_isr()
// #define mcu_disable_tx_isr()
// #endif
#ifdef COM_PORT
#define mcu_rx_ready() (COM_USART->SR & USART_SR_RXNE)
#define mcu_tx_ready() (COM_USART->SR & USART_SR_TXE)
#else
#ifdef USB_VCP
#define mcu_rx_ready() tud_cdc_n_available(0)
#define mcu_tx_ready() tud_cdc_n_write_available(0)
#endif
#endif

#define GPIO_RESET 0xfU
#define GPIO_OUT_PP_50MHZ 0x3U
#define GPIO_OUTALT_PP_50MHZ 0xbU
#define GPIO_IN_FLOAT 0x4U
#define GPIO_IN_PUP 0x8U
#define GPIO_IN_ANALOG 0 //not needed after reseting bits
*/
#ifdef __cplusplus
}
#endif

#endif