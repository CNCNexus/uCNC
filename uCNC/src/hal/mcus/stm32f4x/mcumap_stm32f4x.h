/*
	Name: mcumap_stm32f40x.h
	Description: Contains all MCU and PIN definitions for STM32F10x to run µCNC.

	Copyright: Copyright (c) João Martins
	Author: João Martins
	Date: 05-02-2022

	µCNC is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version. Please see <http://www.gnu.org/licenses/>

	µCNC is distributed WITHOUT ANY WARRANTY;
	Also without the implied warranty of	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	See the	GNU General Public License for more details.
*/

#ifndef MCUMAP_STM32F4x_H
#define MCUMAP_STM32F4x_H

#ifdef __cplusplus
extern "C"
{
#endif

/*
	Generates all the interface definitions.
	This creates a middle HAL layer between the board IO pins and the AVR funtionalities
*/
/*
	MCU specific definitions and replacements
*/
#include "stm32f4xx.h"
#include <stdbool.h>

// defines the frequency of the mcu
#ifndef F_CPU
#define F_CPU 84000000UL
#endif

// defines the value of the external crystal (by default sets to 25MHZ like the one in the blackpill)
#ifndef EXTERNAL_XTAL_MHZ
#define EXTERNAL_XTAL_MHZ 25
#endif
// defines the maximum and minimum step rates
#define F_STEP_MAX 100000
#define F_STEP_MIN 4
// defines special mcu to access flash strings and arrays
#define __rom__
#define __romstr__
#define __romarr__ const char
#define rom_strptr *
#define rom_strcpy strcpy
#define rom_strncpy strncpy
#define rom_memcpy memcpy
#define rom_read_byte *

#if (INTERFACE == INTERFACE_USB)
// if USB VCP is used force RX sync also
#define ENABLE_SYNC_TX
#define ENABLE_SYNC_RX
#endif

// Helper macros
#define __helper_ex__(left, mid, right) left##mid##right
#define __helper__(left, mid, right) __helper_ex__(left, mid, right)

// STM32 internal register names
#define __gpio__(X) (__helper__(GPIO, X, ))
#define __rccgpioen__(X) (__helper__(RCC_AHB1ENR_GPIO, X, EN))
#define __afioexti__(X) __helper__(EXTI, X, )
#define __extirq__(X) __helper__(EXTI, X, _IRQn)
#define __tim__(X) (__helper__(TIM, X, ))
#define __irq__(X) (__helper__(X, _IRQn, ))
#define __rccapb1timen__(X) (__helper__(RCC_APB1ENR_TIM, X, EN))
#define __rccapb2timen__(X) (__helper__(RCC_APB2ENR_TIM, X, EN))
#define __ccr__(X) __helper__(CCR, X, )
#define __usart__(X) __helper__(USART, X, )
#define __uart__(X) __helper__(UART, X, )

/**********************************************
 *	Autogenerated macros
 **********************************************/

/**********************************************
 *	IO Pins
 **********************************************/
#if (defined(STEP0_PORT) && defined(STEP0_BIT))
#define STEP0 0
#define STEP0_AHB1EN (__rccgpioen__(STEP0_PORT))
#define STEP0_GPIO (__gpio__(STEP0_PORT))
#define DIO0 0
#define DIO0_PORT STEP0_PORT
#define DIO0_BIT STEP0_BIT
#define DIO0_AHB1EN STEP0_AHB1EN
#define DIO0_GPIO STEP0_GPIO
#endif
#if (defined(STEP1_PORT) && defined(STEP1_BIT))
#define STEP1 1
#define STEP1_AHB1EN (__rccgpioen__(STEP1_PORT))
#define STEP1_GPIO (__gpio__(STEP1_PORT))
#define DIO1 1
#define DIO1_PORT STEP1_PORT
#define DIO1_BIT STEP1_BIT
#define DIO1_AHB1EN STEP1_AHB1EN
#define DIO1_GPIO STEP1_GPIO
#endif
#if (defined(STEP2_PORT) && defined(STEP2_BIT))
#define STEP2 2
#define STEP2_AHB1EN (__rccgpioen__(STEP2_PORT))
#define STEP2_GPIO (__gpio__(STEP2_PORT))
#define DIO2 2
#define DIO2_PORT STEP2_PORT
#define DIO2_BIT STEP2_BIT
#define DIO2_AHB1EN STEP2_AHB1EN
#define DIO2_GPIO STEP2_GPIO
#endif
#if (defined(STEP3_PORT) && defined(STEP3_BIT))
#define STEP3 3
#define STEP3_AHB1EN (__rccgpioen__(STEP3_PORT))
#define STEP3_GPIO (__gpio__(STEP3_PORT))
#define DIO3 3
#define DIO3_PORT STEP3_PORT
#define DIO3_BIT STEP3_BIT
#define DIO3_AHB1EN STEP3_AHB1EN
#define DIO3_GPIO STEP3_GPIO
#endif
#if (defined(STEP4_PORT) && defined(STEP4_BIT))
#define STEP4 4
#define STEP4_AHB1EN (__rccgpioen__(STEP4_PORT))
#define STEP4_GPIO (__gpio__(STEP4_PORT))
#define DIO4 4
#define DIO4_PORT STEP4_PORT
#define DIO4_BIT STEP4_BIT
#define DIO4_AHB1EN STEP4_AHB1EN
#define DIO4_GPIO STEP4_GPIO
#endif
#if (defined(STEP5_PORT) && defined(STEP5_BIT))
#define STEP5 5
#define STEP5_AHB1EN (__rccgpioen__(STEP5_PORT))
#define STEP5_GPIO (__gpio__(STEP5_PORT))
#define DIO5 5
#define DIO5_PORT STEP5_PORT
#define DIO5_BIT STEP5_BIT
#define DIO5_AHB1EN STEP5_AHB1EN
#define DIO5_GPIO STEP5_GPIO
#endif
#if (defined(STEP6_PORT) && defined(STEP6_BIT))
#define STEP6 6
#define STEP6_AHB1EN (__rccgpioen__(STEP6_PORT))
#define STEP6_GPIO (__gpio__(STEP6_PORT))
#define DIO6 6
#define DIO6_PORT STEP6_PORT
#define DIO6_BIT STEP6_BIT
#define DIO6_AHB1EN STEP6_AHB1EN
#define DIO6_GPIO STEP6_GPIO
#endif
#if (defined(STEP7_PORT) && defined(STEP7_BIT))
#define STEP7 7
#define STEP7_AHB1EN (__rccgpioen__(STEP7_PORT))
#define STEP7_GPIO (__gpio__(STEP7_PORT))
#define DIO7 7
#define DIO7_PORT STEP7_PORT
#define DIO7_BIT STEP7_BIT
#define DIO7_AHB1EN STEP7_AHB1EN
#define DIO7_GPIO STEP7_GPIO
#endif
#if (defined(DIR0_PORT) && defined(DIR0_BIT))
#define DIR0 8
#define DIR0_AHB1EN (__rccgpioen__(DIR0_PORT))
#define DIR0_GPIO (__gpio__(DIR0_PORT))
#define DIO8 8
#define DIO8_PORT DIR0_PORT
#define DIO8_BIT DIR0_BIT
#define DIO8_AHB1EN DIR0_AHB1EN
#define DIO8_GPIO DIR0_GPIO
#endif
#if (defined(DIR1_PORT) && defined(DIR1_BIT))
#define DIR1 9
#define DIR1_AHB1EN (__rccgpioen__(DIR1_PORT))
#define DIR1_GPIO (__gpio__(DIR1_PORT))
#define DIO9 9
#define DIO9_PORT DIR1_PORT
#define DIO9_BIT DIR1_BIT
#define DIO9_AHB1EN DIR1_AHB1EN
#define DIO9_GPIO DIR1_GPIO
#endif
#if (defined(DIR2_PORT) && defined(DIR2_BIT))
#define DIR2 10
#define DIR2_AHB1EN (__rccgpioen__(DIR2_PORT))
#define DIR2_GPIO (__gpio__(DIR2_PORT))
#define DIO10 10
#define DIO10_PORT DIR2_PORT
#define DIO10_BIT DIR2_BIT
#define DIO10_AHB1EN DIR2_AHB1EN
#define DIO10_GPIO DIR2_GPIO
#endif
#if (defined(DIR3_PORT) && defined(DIR3_BIT))
#define DIR3 11
#define DIR3_AHB1EN (__rccgpioen__(DIR3_PORT))
#define DIR3_GPIO (__gpio__(DIR3_PORT))
#define DIO11 11
#define DIO11_PORT DIR3_PORT
#define DIO11_BIT DIR3_BIT
#define DIO11_AHB1EN DIR3_AHB1EN
#define DIO11_GPIO DIR3_GPIO
#endif
#if (defined(DIR4_PORT) && defined(DIR4_BIT))
#define DIR4 12
#define DIR4_AHB1EN (__rccgpioen__(DIR4_PORT))
#define DIR4_GPIO (__gpio__(DIR4_PORT))
#define DIO12 12
#define DIO12_PORT DIR4_PORT
#define DIO12_BIT DIR4_BIT
#define DIO12_AHB1EN DIR4_AHB1EN
#define DIO12_GPIO DIR4_GPIO
#endif
#if (defined(DIR5_PORT) && defined(DIR5_BIT))
#define DIR5 13
#define DIR5_AHB1EN (__rccgpioen__(DIR5_PORT))
#define DIR5_GPIO (__gpio__(DIR5_PORT))
#define DIO13 13
#define DIO13_PORT DIR5_PORT
#define DIO13_BIT DIR5_BIT
#define DIO13_AHB1EN DIR5_AHB1EN
#define DIO13_GPIO DIR5_GPIO
#endif
#if (defined(STEP0_EN_PORT) && defined(STEP0_EN_BIT))
#define STEP0_EN 14
#define STEP0_EN_AHB1EN (__rccgpioen__(STEP0_EN_PORT))
#define STEP0_EN_GPIO (__gpio__(STEP0_EN_PORT))
#define DIO14 14
#define DIO14_PORT STEP0_EN_PORT
#define DIO14_BIT STEP0_EN_BIT
#define DIO14_AHB1EN STEP0_EN_AHB1EN
#define DIO14_GPIO STEP0_EN_GPIO
#endif
#if (defined(STEP1_EN_PORT) && defined(STEP1_EN_BIT))
#define STEP1_EN 15
#define STEP1_EN_AHB1EN (__rccgpioen__(STEP1_EN_PORT))
#define STEP1_EN_GPIO (__gpio__(STEP1_EN_PORT))
#define DIO15 15
#define DIO15_PORT STEP1_EN_PORT
#define DIO15_BIT STEP1_EN_BIT
#define DIO15_AHB1EN STEP1_EN_AHB1EN
#define DIO15_GPIO STEP1_EN_GPIO
#endif
#if (defined(STEP2_EN_PORT) && defined(STEP2_EN_BIT))
#define STEP2_EN 16
#define STEP2_EN_AHB1EN (__rccgpioen__(STEP2_EN_PORT))
#define STEP2_EN_GPIO (__gpio__(STEP2_EN_PORT))
#define DIO16 16
#define DIO16_PORT STEP2_EN_PORT
#define DIO16_BIT STEP2_EN_BIT
#define DIO16_AHB1EN STEP2_EN_AHB1EN
#define DIO16_GPIO STEP2_EN_GPIO
#endif
#if (defined(STEP3_EN_PORT) && defined(STEP3_EN_BIT))
#define STEP3_EN 17
#define STEP3_EN_AHB1EN (__rccgpioen__(STEP3_EN_PORT))
#define STEP3_EN_GPIO (__gpio__(STEP3_EN_PORT))
#define DIO17 17
#define DIO17_PORT STEP3_EN_PORT
#define DIO17_BIT STEP3_EN_BIT
#define DIO17_AHB1EN STEP3_EN_AHB1EN
#define DIO17_GPIO STEP3_EN_GPIO
#endif
#if (defined(STEP4_EN_PORT) && defined(STEP4_EN_BIT))
#define STEP4_EN 18
#define STEP4_EN_AHB1EN (__rccgpioen__(STEP4_EN_PORT))
#define STEP4_EN_GPIO (__gpio__(STEP4_EN_PORT))
#define DIO18 18
#define DIO18_PORT STEP4_EN_PORT
#define DIO18_BIT STEP4_EN_BIT
#define DIO18_AHB1EN STEP4_EN_AHB1EN
#define DIO18_GPIO STEP4_EN_GPIO
#endif
#if (defined(STEP5_EN_PORT) && defined(STEP5_EN_BIT))
#define STEP5_EN 19
#define STEP5_EN_AHB1EN (__rccgpioen__(STEP5_EN_PORT))
#define STEP5_EN_GPIO (__gpio__(STEP5_EN_PORT))
#define DIO19 19
#define DIO19_PORT STEP5_EN_PORT
#define DIO19_BIT STEP5_EN_BIT
#define DIO19_AHB1EN STEP5_EN_AHB1EN
#define DIO19_GPIO STEP5_EN_GPIO
#endif
#if (defined(PWM0_PORT) && defined(PWM0_BIT))
#define PWM0 20
#define PWM0_AHB1EN (__rccgpioen__(PWM0_PORT))
#define PWM0_GPIO (__gpio__(PWM0_PORT))
#define DIO20 20
#define DIO20_PORT PWM0_PORT
#define DIO20_BIT PWM0_BIT
#define DIO20_AHB1EN PWM0_AHB1EN
#define DIO20_GPIO PWM0_GPIO
#endif
#if (defined(PWM1_PORT) && defined(PWM1_BIT))
#define PWM1 21
#define PWM1_AHB1EN (__rccgpioen__(PWM1_PORT))
#define PWM1_GPIO (__gpio__(PWM1_PORT))
#define DIO21 21
#define DIO21_PORT PWM1_PORT
#define DIO21_BIT PWM1_BIT
#define DIO21_AHB1EN PWM1_AHB1EN
#define DIO21_GPIO PWM1_GPIO
#endif
#if (defined(PWM2_PORT) && defined(PWM2_BIT))
#define PWM2 22
#define PWM2_AHB1EN (__rccgpioen__(PWM2_PORT))
#define PWM2_GPIO (__gpio__(PWM2_PORT))
#define DIO22 22
#define DIO22_PORT PWM2_PORT
#define DIO22_BIT PWM2_BIT
#define DIO22_AHB1EN PWM2_AHB1EN
#define DIO22_GPIO PWM2_GPIO
#endif
#if (defined(PWM3_PORT) && defined(PWM3_BIT))
#define PWM3 23
#define PWM3_AHB1EN (__rccgpioen__(PWM3_PORT))
#define PWM3_GPIO (__gpio__(PWM3_PORT))
#define DIO23 23
#define DIO23_PORT PWM3_PORT
#define DIO23_BIT PWM3_BIT
#define DIO23_AHB1EN PWM3_AHB1EN
#define DIO23_GPIO PWM3_GPIO
#endif
#if (defined(PWM4_PORT) && defined(PWM4_BIT))
#define PWM4 24
#define PWM4_AHB1EN (__rccgpioen__(PWM4_PORT))
#define PWM4_GPIO (__gpio__(PWM4_PORT))
#define DIO24 24
#define DIO24_PORT PWM4_PORT
#define DIO24_BIT PWM4_BIT
#define DIO24_AHB1EN PWM4_AHB1EN
#define DIO24_GPIO PWM4_GPIO
#endif
#if (defined(PWM5_PORT) && defined(PWM5_BIT))
#define PWM5 25
#define PWM5_AHB1EN (__rccgpioen__(PWM5_PORT))
#define PWM5_GPIO (__gpio__(PWM5_PORT))
#define DIO25 25
#define DIO25_PORT PWM5_PORT
#define DIO25_BIT PWM5_BIT
#define DIO25_AHB1EN PWM5_AHB1EN
#define DIO25_GPIO PWM5_GPIO
#endif
#if (defined(PWM6_PORT) && defined(PWM6_BIT))
#define PWM6 26
#define PWM6_AHB1EN (__rccgpioen__(PWM6_PORT))
#define PWM6_GPIO (__gpio__(PWM6_PORT))
#define DIO26 26
#define DIO26_PORT PWM6_PORT
#define DIO26_BIT PWM6_BIT
#define DIO26_AHB1EN PWM6_AHB1EN
#define DIO26_GPIO PWM6_GPIO
#endif
#if (defined(PWM7_PORT) && defined(PWM7_BIT))
#define PWM7 27
#define PWM7_AHB1EN (__rccgpioen__(PWM7_PORT))
#define PWM7_GPIO (__gpio__(PWM7_PORT))
#define DIO27 27
#define DIO27_PORT PWM7_PORT
#define DIO27_BIT PWM7_BIT
#define DIO27_AHB1EN PWM7_AHB1EN
#define DIO27_GPIO PWM7_GPIO
#endif
#if (defined(PWM8_PORT) && defined(PWM8_BIT))
#define PWM8 28
#define PWM8_AHB1EN (__rccgpioen__(PWM8_PORT))
#define PWM8_GPIO (__gpio__(PWM8_PORT))
#define DIO28 28
#define DIO28_PORT PWM8_PORT
#define DIO28_BIT PWM8_BIT
#define DIO28_AHB1EN PWM8_AHB1EN
#define DIO28_GPIO PWM8_GPIO
#endif
#if (defined(PWM9_PORT) && defined(PWM9_BIT))
#define PWM9 29
#define PWM9_AHB1EN (__rccgpioen__(PWM9_PORT))
#define PWM9_GPIO (__gpio__(PWM9_PORT))
#define DIO29 29
#define DIO29_PORT PWM9_PORT
#define DIO29_BIT PWM9_BIT
#define DIO29_AHB1EN PWM9_AHB1EN
#define DIO29_GPIO PWM9_GPIO
#endif
#if (defined(PWM10_PORT) && defined(PWM10_BIT))
#define PWM10 30
#define PWM10_AHB1EN (__rccgpioen__(PWM10_PORT))
#define PWM10_GPIO (__gpio__(PWM10_PORT))
#define DIO30 30
#define DIO30_PORT PWM10_PORT
#define DIO30_BIT PWM10_BIT
#define DIO30_AHB1EN PWM10_AHB1EN
#define DIO30_GPIO PWM10_GPIO
#endif
#if (defined(PWM11_PORT) && defined(PWM11_BIT))
#define PWM11 31
#define PWM11_AHB1EN (__rccgpioen__(PWM11_PORT))
#define PWM11_GPIO (__gpio__(PWM11_PORT))
#define DIO31 31
#define DIO31_PORT PWM11_PORT
#define DIO31_BIT PWM11_BIT
#define DIO31_AHB1EN PWM11_AHB1EN
#define DIO31_GPIO PWM11_GPIO
#endif
#if (defined(PWM12_PORT) && defined(PWM12_BIT))
#define PWM12 32
#define PWM12_AHB1EN (__rccgpioen__(PWM12_PORT))
#define PWM12_GPIO (__gpio__(PWM12_PORT))
#define DIO32 32
#define DIO32_PORT PWM12_PORT
#define DIO32_BIT PWM12_BIT
#define DIO32_AHB1EN PWM12_AHB1EN
#define DIO32_GPIO PWM12_GPIO
#endif
#if (defined(PWM13_PORT) && defined(PWM13_BIT))
#define PWM13 33
#define PWM13_AHB1EN (__rccgpioen__(PWM13_PORT))
#define PWM13_GPIO (__gpio__(PWM13_PORT))
#define DIO33 33
#define DIO33_PORT PWM13_PORT
#define DIO33_BIT PWM13_BIT
#define DIO33_AHB1EN PWM13_AHB1EN
#define DIO33_GPIO PWM13_GPIO
#endif
#if (defined(PWM14_PORT) && defined(PWM14_BIT))
#define PWM14 34
#define PWM14_AHB1EN (__rccgpioen__(PWM14_PORT))
#define PWM14_GPIO (__gpio__(PWM14_PORT))
#define DIO34 34
#define DIO34_PORT PWM14_PORT
#define DIO34_BIT PWM14_BIT
#define DIO34_AHB1EN PWM14_AHB1EN
#define DIO34_GPIO PWM14_GPIO
#endif
#if (defined(PWM15_PORT) && defined(PWM15_BIT))
#define PWM15 35
#define PWM15_AHB1EN (__rccgpioen__(PWM15_PORT))
#define PWM15_GPIO (__gpio__(PWM15_PORT))
#define DIO35 35
#define DIO35_PORT PWM15_PORT
#define DIO35_BIT PWM15_BIT
#define DIO35_AHB1EN PWM15_AHB1EN
#define DIO35_GPIO PWM15_GPIO
#endif
#if (defined(DOUT0_PORT) && defined(DOUT0_BIT))
#define DOUT0 36
#define DOUT0_AHB1EN (__rccgpioen__(DOUT0_PORT))
#define DOUT0_GPIO (__gpio__(DOUT0_PORT))
#define DIO36 36
#define DIO36_PORT DOUT0_PORT
#define DIO36_BIT DOUT0_BIT
#define DIO36_AHB1EN DOUT0_AHB1EN
#define DIO36_GPIO DOUT0_GPIO
#endif
#if (defined(DOUT1_PORT) && defined(DOUT1_BIT))
#define DOUT1 37
#define DOUT1_AHB1EN (__rccgpioen__(DOUT1_PORT))
#define DOUT1_GPIO (__gpio__(DOUT1_PORT))
#define DIO37 37
#define DIO37_PORT DOUT1_PORT
#define DIO37_BIT DOUT1_BIT
#define DIO37_AHB1EN DOUT1_AHB1EN
#define DIO37_GPIO DOUT1_GPIO
#endif
#if (defined(DOUT2_PORT) && defined(DOUT2_BIT))
#define DOUT2 38
#define DOUT2_AHB1EN (__rccgpioen__(DOUT2_PORT))
#define DOUT2_GPIO (__gpio__(DOUT2_PORT))
#define DIO38 38
#define DIO38_PORT DOUT2_PORT
#define DIO38_BIT DOUT2_BIT
#define DIO38_AHB1EN DOUT2_AHB1EN
#define DIO38_GPIO DOUT2_GPIO
#endif
#if (defined(DOUT3_PORT) && defined(DOUT3_BIT))
#define DOUT3 39
#define DOUT3_AHB1EN (__rccgpioen__(DOUT3_PORT))
#define DOUT3_GPIO (__gpio__(DOUT3_PORT))
#define DIO39 39
#define DIO39_PORT DOUT3_PORT
#define DIO39_BIT DOUT3_BIT
#define DIO39_AHB1EN DOUT3_AHB1EN
#define DIO39_GPIO DOUT3_GPIO
#endif
#if (defined(DOUT4_PORT) && defined(DOUT4_BIT))
#define DOUT4 40
#define DOUT4_AHB1EN (__rccgpioen__(DOUT4_PORT))
#define DOUT4_GPIO (__gpio__(DOUT4_PORT))
#define DIO40 40
#define DIO40_PORT DOUT4_PORT
#define DIO40_BIT DOUT4_BIT
#define DIO40_AHB1EN DOUT4_AHB1EN
#define DIO40_GPIO DOUT4_GPIO
#endif
#if (defined(DOUT5_PORT) && defined(DOUT5_BIT))
#define DOUT5 41
#define DOUT5_AHB1EN (__rccgpioen__(DOUT5_PORT))
#define DOUT5_GPIO (__gpio__(DOUT5_PORT))
#define DIO41 41
#define DIO41_PORT DOUT5_PORT
#define DIO41_BIT DOUT5_BIT
#define DIO41_AHB1EN DOUT5_AHB1EN
#define DIO41_GPIO DOUT5_GPIO
#endif
#if (defined(DOUT6_PORT) && defined(DOUT6_BIT))
#define DOUT6 42
#define DOUT6_AHB1EN (__rccgpioen__(DOUT6_PORT))
#define DOUT6_GPIO (__gpio__(DOUT6_PORT))
#define DIO42 42
#define DIO42_PORT DOUT6_PORT
#define DIO42_BIT DOUT6_BIT
#define DIO42_AHB1EN DOUT6_AHB1EN
#define DIO42_GPIO DOUT6_GPIO
#endif
#if (defined(DOUT7_PORT) && defined(DOUT7_BIT))
#define DOUT7 43
#define DOUT7_AHB1EN (__rccgpioen__(DOUT7_PORT))
#define DOUT7_GPIO (__gpio__(DOUT7_PORT))
#define DIO43 43
#define DIO43_PORT DOUT7_PORT
#define DIO43_BIT DOUT7_BIT
#define DIO43_AHB1EN DOUT7_AHB1EN
#define DIO43_GPIO DOUT7_GPIO
#endif
#if (defined(DOUT8_PORT) && defined(DOUT8_BIT))
#define DOUT8 44
#define DOUT8_AHB1EN (__rccgpioen__(DOUT8_PORT))
#define DOUT8_GPIO (__gpio__(DOUT8_PORT))
#define DIO44 44
#define DIO44_PORT DOUT8_PORT
#define DIO44_BIT DOUT8_BIT
#define DIO44_AHB1EN DOUT8_AHB1EN
#define DIO44_GPIO DOUT8_GPIO
#endif
#if (defined(DOUT9_PORT) && defined(DOUT9_BIT))
#define DOUT9 45
#define DOUT9_AHB1EN (__rccgpioen__(DOUT9_PORT))
#define DOUT9_GPIO (__gpio__(DOUT9_PORT))
#define DIO45 45
#define DIO45_PORT DOUT9_PORT
#define DIO45_BIT DOUT9_BIT
#define DIO45_AHB1EN DOUT9_AHB1EN
#define DIO45_GPIO DOUT9_GPIO
#endif
#if (defined(DOUT10_PORT) && defined(DOUT10_BIT))
#define DOUT10 46
#define DOUT10_AHB1EN (__rccgpioen__(DOUT10_PORT))
#define DOUT10_GPIO (__gpio__(DOUT10_PORT))
#define DIO46 46
#define DIO46_PORT DOUT10_PORT
#define DIO46_BIT DOUT10_BIT
#define DIO46_AHB1EN DOUT10_AHB1EN
#define DIO46_GPIO DOUT10_GPIO
#endif
#if (defined(DOUT11_PORT) && defined(DOUT11_BIT))
#define DOUT11 47
#define DOUT11_AHB1EN (__rccgpioen__(DOUT11_PORT))
#define DOUT11_GPIO (__gpio__(DOUT11_PORT))
#define DIO47 47
#define DIO47_PORT DOUT11_PORT
#define DIO47_BIT DOUT11_BIT
#define DIO47_AHB1EN DOUT11_AHB1EN
#define DIO47_GPIO DOUT11_GPIO
#endif
#if (defined(DOUT12_PORT) && defined(DOUT12_BIT))
#define DOUT12 48
#define DOUT12_AHB1EN (__rccgpioen__(DOUT12_PORT))
#define DOUT12_GPIO (__gpio__(DOUT12_PORT))
#define DIO48 48
#define DIO48_PORT DOUT12_PORT
#define DIO48_BIT DOUT12_BIT
#define DIO48_AHB1EN DOUT12_AHB1EN
#define DIO48_GPIO DOUT12_GPIO
#endif
#if (defined(DOUT13_PORT) && defined(DOUT13_BIT))
#define DOUT13 49
#define DOUT13_AHB1EN (__rccgpioen__(DOUT13_PORT))
#define DOUT13_GPIO (__gpio__(DOUT13_PORT))
#define DIO49 49
#define DIO49_PORT DOUT13_PORT
#define DIO49_BIT DOUT13_BIT
#define DIO49_AHB1EN DOUT13_AHB1EN
#define DIO49_GPIO DOUT13_GPIO
#endif
#if (defined(DOUT14_PORT) && defined(DOUT14_BIT))
#define DOUT14 50
#define DOUT14_AHB1EN (__rccgpioen__(DOUT14_PORT))
#define DOUT14_GPIO (__gpio__(DOUT14_PORT))
#define DIO50 50
#define DIO50_PORT DOUT14_PORT
#define DIO50_BIT DOUT14_BIT
#define DIO50_AHB1EN DOUT14_AHB1EN
#define DIO50_GPIO DOUT14_GPIO
#endif
#if (defined(DOUT15_PORT) && defined(DOUT15_BIT))
#define DOUT15 51
#define DOUT15_AHB1EN (__rccgpioen__(DOUT15_PORT))
#define DOUT15_GPIO (__gpio__(DOUT15_PORT))
#define DIO51 51
#define DIO51_PORT DOUT15_PORT
#define DIO51_BIT DOUT15_BIT
#define DIO51_AHB1EN DOUT15_AHB1EN
#define DIO51_GPIO DOUT15_GPIO
#endif
#if (defined(LIMIT_X_PORT) && defined(LIMIT_X_BIT))
#define LIMIT_X 52
#define LIMIT_X_AHB1EN (__rccgpioen__(LIMIT_X_PORT))
#define LIMIT_X_GPIO (__gpio__(LIMIT_X_PORT))
#define DIO52 52
#define DIO52_PORT LIMIT_X_PORT
#define DIO52_BIT LIMIT_X_BIT
#define DIO52_AHB1EN LIMIT_X_AHB1EN
#define DIO52_GPIO LIMIT_X_GPIO
#endif
#if (defined(LIMIT_Y_PORT) && defined(LIMIT_Y_BIT))
#define LIMIT_Y 53
#define LIMIT_Y_AHB1EN (__rccgpioen__(LIMIT_Y_PORT))
#define LIMIT_Y_GPIO (__gpio__(LIMIT_Y_PORT))
#define DIO53 53
#define DIO53_PORT LIMIT_Y_PORT
#define DIO53_BIT LIMIT_Y_BIT
#define DIO53_AHB1EN LIMIT_Y_AHB1EN
#define DIO53_GPIO LIMIT_Y_GPIO
#endif
#if (defined(LIMIT_Z_PORT) && defined(LIMIT_Z_BIT))
#define LIMIT_Z 54
#define LIMIT_Z_AHB1EN (__rccgpioen__(LIMIT_Z_PORT))
#define LIMIT_Z_GPIO (__gpio__(LIMIT_Z_PORT))
#define DIO54 54
#define DIO54_PORT LIMIT_Z_PORT
#define DIO54_BIT LIMIT_Z_BIT
#define DIO54_AHB1EN LIMIT_Z_AHB1EN
#define DIO54_GPIO LIMIT_Z_GPIO
#endif
#if (defined(LIMIT_X2_PORT) && defined(LIMIT_X2_BIT))
#define LIMIT_X2 55
#define LIMIT_X2_AHB1EN (__rccgpioen__(LIMIT_X2_PORT))
#define LIMIT_X2_GPIO (__gpio__(LIMIT_X2_PORT))
#define DIO55 55
#define DIO55_PORT LIMIT_X2_PORT
#define DIO55_BIT LIMIT_X2_BIT
#define DIO55_AHB1EN LIMIT_X2_AHB1EN
#define DIO55_GPIO LIMIT_X2_GPIO
#endif
#if (defined(LIMIT_Y2_PORT) && defined(LIMIT_Y2_BIT))
#define LIMIT_Y2 56
#define LIMIT_Y2_AHB1EN (__rccgpioen__(LIMIT_Y2_PORT))
#define LIMIT_Y2_GPIO (__gpio__(LIMIT_Y2_PORT))
#define DIO56 56
#define DIO56_PORT LIMIT_Y2_PORT
#define DIO56_BIT LIMIT_Y2_BIT
#define DIO56_AHB1EN LIMIT_Y2_AHB1EN
#define DIO56_GPIO LIMIT_Y2_GPIO
#endif
#if (defined(LIMIT_Z2_PORT) && defined(LIMIT_Z2_BIT))
#define LIMIT_Z2 57
#define LIMIT_Z2_AHB1EN (__rccgpioen__(LIMIT_Z2_PORT))
#define LIMIT_Z2_GPIO (__gpio__(LIMIT_Z2_PORT))
#define DIO57 57
#define DIO57_PORT LIMIT_Z2_PORT
#define DIO57_BIT LIMIT_Z2_BIT
#define DIO57_AHB1EN LIMIT_Z2_AHB1EN
#define DIO57_GPIO LIMIT_Z2_GPIO
#endif
#if (defined(LIMIT_A_PORT) && defined(LIMIT_A_BIT))
#define LIMIT_A 58
#define LIMIT_A_AHB1EN (__rccgpioen__(LIMIT_A_PORT))
#define LIMIT_A_GPIO (__gpio__(LIMIT_A_PORT))
#define DIO58 58
#define DIO58_PORT LIMIT_A_PORT
#define DIO58_BIT LIMIT_A_BIT
#define DIO58_AHB1EN LIMIT_A_AHB1EN
#define DIO58_GPIO LIMIT_A_GPIO
#endif
#if (defined(LIMIT_B_PORT) && defined(LIMIT_B_BIT))
#define LIMIT_B 59
#define LIMIT_B_AHB1EN (__rccgpioen__(LIMIT_B_PORT))
#define LIMIT_B_GPIO (__gpio__(LIMIT_B_PORT))
#define DIO59 59
#define DIO59_PORT LIMIT_B_PORT
#define DIO59_BIT LIMIT_B_BIT
#define DIO59_AHB1EN LIMIT_B_AHB1EN
#define DIO59_GPIO LIMIT_B_GPIO
#endif
#if (defined(LIMIT_C_PORT) && defined(LIMIT_C_BIT))
#define LIMIT_C 60
#define LIMIT_C_AHB1EN (__rccgpioen__(LIMIT_C_PORT))
#define LIMIT_C_GPIO (__gpio__(LIMIT_C_PORT))
#define DIO60 60
#define DIO60_PORT LIMIT_C_PORT
#define DIO60_BIT LIMIT_C_BIT
#define DIO60_AHB1EN LIMIT_C_AHB1EN
#define DIO60_GPIO LIMIT_C_GPIO
#endif
#if (defined(PROBE_PORT) && defined(PROBE_BIT))
#define PROBE 61
#define PROBE_AHB1EN (__rccgpioen__(PROBE_PORT))
#define PROBE_GPIO (__gpio__(PROBE_PORT))
#define DIO61 61
#define DIO61_PORT PROBE_PORT
#define DIO61_BIT PROBE_BIT
#define DIO61_AHB1EN PROBE_AHB1EN
#define DIO61_GPIO PROBE_GPIO
#endif
#if (defined(ESTOP_PORT) && defined(ESTOP_BIT))
#define ESTOP 62
#define ESTOP_AHB1EN (__rccgpioen__(ESTOP_PORT))
#define ESTOP_GPIO (__gpio__(ESTOP_PORT))
#define DIO62 62
#define DIO62_PORT ESTOP_PORT
#define DIO62_BIT ESTOP_BIT
#define DIO62_AHB1EN ESTOP_AHB1EN
#define DIO62_GPIO ESTOP_GPIO
#endif
#if (defined(SAFETY_DOOR_PORT) && defined(SAFETY_DOOR_BIT))
#define SAFETY_DOOR 63
#define SAFETY_DOOR_AHB1EN (__rccgpioen__(SAFETY_DOOR_PORT))
#define SAFETY_DOOR_GPIO (__gpio__(SAFETY_DOOR_PORT))
#define DIO63 63
#define DIO63_PORT SAFETY_DOOR_PORT
#define DIO63_BIT SAFETY_DOOR_BIT
#define DIO63_AHB1EN SAFETY_DOOR_AHB1EN
#define DIO63_GPIO SAFETY_DOOR_GPIO
#endif
#if (defined(FHOLD_PORT) && defined(FHOLD_BIT))
#define FHOLD 64
#define FHOLD_AHB1EN (__rccgpioen__(FHOLD_PORT))
#define FHOLD_GPIO (__gpio__(FHOLD_PORT))
#define DIO64 64
#define DIO64_PORT FHOLD_PORT
#define DIO64_BIT FHOLD_BIT
#define DIO64_AHB1EN FHOLD_AHB1EN
#define DIO64_GPIO FHOLD_GPIO
#endif
#if (defined(CS_RES_PORT) && defined(CS_RES_BIT))
#define CS_RES 65
#define CS_RES_AHB1EN (__rccgpioen__(CS_RES_PORT))
#define CS_RES_GPIO (__gpio__(CS_RES_PORT))
#define DIO65 65
#define DIO65_PORT CS_RES_PORT
#define DIO65_BIT CS_RES_BIT
#define DIO65_AHB1EN CS_RES_AHB1EN
#define DIO65_GPIO CS_RES_GPIO
#endif
#if (defined(ANALOG0_PORT) && defined(ANALOG0_BIT))
#define ANALOG0 66
#define ANALOG0_AHB1EN (__rccgpioen__(ANALOG0_PORT))
#define ANALOG0_GPIO (__gpio__(ANALOG0_PORT))
#define DIO66 66
#define DIO66_PORT ANALOG0_PORT
#define DIO66_BIT ANALOG0_BIT
#define DIO66_AHB1EN ANALOG0_AHB1EN
#define DIO66_GPIO ANALOG0_GPIO
#endif
#if (defined(ANALOG1_PORT) && defined(ANALOG1_BIT))
#define ANALOG1 67
#define ANALOG1_AHB1EN (__rccgpioen__(ANALOG1_PORT))
#define ANALOG1_GPIO (__gpio__(ANALOG1_PORT))
#define DIO67 67
#define DIO67_PORT ANALOG1_PORT
#define DIO67_BIT ANALOG1_BIT
#define DIO67_AHB1EN ANALOG1_AHB1EN
#define DIO67_GPIO ANALOG1_GPIO
#endif
#if (defined(ANALOG2_PORT) && defined(ANALOG2_BIT))
#define ANALOG2 68
#define ANALOG2_AHB1EN (__rccgpioen__(ANALOG2_PORT))
#define ANALOG2_GPIO (__gpio__(ANALOG2_PORT))
#define DIO68 68
#define DIO68_PORT ANALOG2_PORT
#define DIO68_BIT ANALOG2_BIT
#define DIO68_AHB1EN ANALOG2_AHB1EN
#define DIO68_GPIO ANALOG2_GPIO
#endif
#if (defined(ANALOG3_PORT) && defined(ANALOG3_BIT))
#define ANALOG3 69
#define ANALOG3_AHB1EN (__rccgpioen__(ANALOG3_PORT))
#define ANALOG3_GPIO (__gpio__(ANALOG3_PORT))
#define DIO69 69
#define DIO69_PORT ANALOG3_PORT
#define DIO69_BIT ANALOG3_BIT
#define DIO69_AHB1EN ANALOG3_AHB1EN
#define DIO69_GPIO ANALOG3_GPIO
#endif
#if (defined(ANALOG4_PORT) && defined(ANALOG4_BIT))
#define ANALOG4 70
#define ANALOG4_AHB1EN (__rccgpioen__(ANALOG4_PORT))
#define ANALOG4_GPIO (__gpio__(ANALOG4_PORT))
#define DIO70 70
#define DIO70_PORT ANALOG4_PORT
#define DIO70_BIT ANALOG4_BIT
#define DIO70_AHB1EN ANALOG4_AHB1EN
#define DIO70_GPIO ANALOG4_GPIO
#endif
#if (defined(ANALOG5_PORT) && defined(ANALOG5_BIT))
#define ANALOG5 71
#define ANALOG5_AHB1EN (__rccgpioen__(ANALOG5_PORT))
#define ANALOG5_GPIO (__gpio__(ANALOG5_PORT))
#define DIO71 71
#define DIO71_PORT ANALOG5_PORT
#define DIO71_BIT ANALOG5_BIT
#define DIO71_AHB1EN ANALOG5_AHB1EN
#define DIO71_GPIO ANALOG5_GPIO
#endif
#if (defined(ANALOG6_PORT) && defined(ANALOG6_BIT))
#define ANALOG6 72
#define ANALOG6_AHB1EN (__rccgpioen__(ANALOG6_PORT))
#define ANALOG6_GPIO (__gpio__(ANALOG6_PORT))
#define DIO72 72
#define DIO72_PORT ANALOG6_PORT
#define DIO72_BIT ANALOG6_BIT
#define DIO72_AHB1EN ANALOG6_AHB1EN
#define DIO72_GPIO ANALOG6_GPIO
#endif
#if (defined(ANALOG7_PORT) && defined(ANALOG7_BIT))
#define ANALOG7 73
#define ANALOG7_AHB1EN (__rccgpioen__(ANALOG7_PORT))
#define ANALOG7_GPIO (__gpio__(ANALOG7_PORT))
#define DIO73 73
#define DIO73_PORT ANALOG7_PORT
#define DIO73_BIT ANALOG7_BIT
#define DIO73_AHB1EN ANALOG7_AHB1EN
#define DIO73_GPIO ANALOG7_GPIO
#endif
#if (defined(ANALOG8_PORT) && defined(ANALOG8_BIT))
#define ANALOG8 74
#define ANALOG8_AHB1EN (__rccgpioen__(ANALOG8_PORT))
#define ANALOG8_GPIO (__gpio__(ANALOG8_PORT))
#define DIO74 74
#define DIO74_PORT ANALOG8_PORT
#define DIO74_BIT ANALOG8_BIT
#define DIO74_AHB1EN ANALOG8_AHB1EN
#define DIO74_GPIO ANALOG8_GPIO
#endif
#if (defined(ANALOG9_PORT) && defined(ANALOG9_BIT))
#define ANALOG9 75
#define ANALOG9_AHB1EN (__rccgpioen__(ANALOG9_PORT))
#define ANALOG9_GPIO (__gpio__(ANALOG9_PORT))
#define DIO75 75
#define DIO75_PORT ANALOG9_PORT
#define DIO75_BIT ANALOG9_BIT
#define DIO75_AHB1EN ANALOG9_AHB1EN
#define DIO75_GPIO ANALOG9_GPIO
#endif
#if (defined(ANALOG10_PORT) && defined(ANALOG10_BIT))
#define ANALOG10 76
#define ANALOG10_AHB1EN (__rccgpioen__(ANALOG10_PORT))
#define ANALOG10_GPIO (__gpio__(ANALOG10_PORT))
#define DIO76 76
#define DIO76_PORT ANALOG10_PORT
#define DIO76_BIT ANALOG10_BIT
#define DIO76_AHB1EN ANALOG10_AHB1EN
#define DIO76_GPIO ANALOG10_GPIO
#endif
#if (defined(ANALOG11_PORT) && defined(ANALOG11_BIT))
#define ANALOG11 77
#define ANALOG11_AHB1EN (__rccgpioen__(ANALOG11_PORT))
#define ANALOG11_GPIO (__gpio__(ANALOG11_PORT))
#define DIO77 77
#define DIO77_PORT ANALOG11_PORT
#define DIO77_BIT ANALOG11_BIT
#define DIO77_AHB1EN ANALOG11_AHB1EN
#define DIO77_GPIO ANALOG11_GPIO
#endif
#if (defined(ANALOG12_PORT) && defined(ANALOG12_BIT))
#define ANALOG12 78
#define ANALOG12_AHB1EN (__rccgpioen__(ANALOG12_PORT))
#define ANALOG12_GPIO (__gpio__(ANALOG12_PORT))
#define DIO78 78
#define DIO78_PORT ANALOG12_PORT
#define DIO78_BIT ANALOG12_BIT
#define DIO78_AHB1EN ANALOG12_AHB1EN
#define DIO78_GPIO ANALOG12_GPIO
#endif
#if (defined(ANALOG13_PORT) && defined(ANALOG13_BIT))
#define ANALOG13 79
#define ANALOG13_AHB1EN (__rccgpioen__(ANALOG13_PORT))
#define ANALOG13_GPIO (__gpio__(ANALOG13_PORT))
#define DIO79 79
#define DIO79_PORT ANALOG13_PORT
#define DIO79_BIT ANALOG13_BIT
#define DIO79_AHB1EN ANALOG13_AHB1EN
#define DIO79_GPIO ANALOG13_GPIO
#endif
#if (defined(ANALOG14_PORT) && defined(ANALOG14_BIT))
#define ANALOG14 80
#define ANALOG14_AHB1EN (__rccgpioen__(ANALOG14_PORT))
#define ANALOG14_GPIO (__gpio__(ANALOG14_PORT))
#define DIO80 80
#define DIO80_PORT ANALOG14_PORT
#define DIO80_BIT ANALOG14_BIT
#define DIO80_AHB1EN ANALOG14_AHB1EN
#define DIO80_GPIO ANALOG14_GPIO
#endif
#if (defined(ANALOG15_PORT) && defined(ANALOG15_BIT))
#define ANALOG15 81
#define ANALOG15_AHB1EN (__rccgpioen__(ANALOG15_PORT))
#define ANALOG15_GPIO (__gpio__(ANALOG15_PORT))
#define DIO81 81
#define DIO81_PORT ANALOG15_PORT
#define DIO81_BIT ANALOG15_BIT
#define DIO81_AHB1EN ANALOG15_AHB1EN
#define DIO81_GPIO ANALOG15_GPIO
#endif
#if (defined(DIN0_PORT) && defined(DIN0_BIT))
#define DIN0 82
#define DIN0_AHB1EN (__rccgpioen__(DIN0_PORT))
#define DIN0_GPIO (__gpio__(DIN0_PORT))
#define DIO82 82
#define DIO82_PORT DIN0_PORT
#define DIO82_BIT DIN0_BIT
#define DIO82_AHB1EN DIN0_AHB1EN
#define DIO82_GPIO DIN0_GPIO
#endif
#if (defined(DIN1_PORT) && defined(DIN1_BIT))
#define DIN1 83
#define DIN1_AHB1EN (__rccgpioen__(DIN1_PORT))
#define DIN1_GPIO (__gpio__(DIN1_PORT))
#define DIO83 83
#define DIO83_PORT DIN1_PORT
#define DIO83_BIT DIN1_BIT
#define DIO83_AHB1EN DIN1_AHB1EN
#define DIO83_GPIO DIN1_GPIO
#endif
#if (defined(DIN2_PORT) && defined(DIN2_BIT))
#define DIN2 84
#define DIN2_AHB1EN (__rccgpioen__(DIN2_PORT))
#define DIN2_GPIO (__gpio__(DIN2_PORT))
#define DIO84 84
#define DIO84_PORT DIN2_PORT
#define DIO84_BIT DIN2_BIT
#define DIO84_AHB1EN DIN2_AHB1EN
#define DIO84_GPIO DIN2_GPIO
#endif
#if (defined(DIN3_PORT) && defined(DIN3_BIT))
#define DIN3 85
#define DIN3_AHB1EN (__rccgpioen__(DIN3_PORT))
#define DIN3_GPIO (__gpio__(DIN3_PORT))
#define DIO85 85
#define DIO85_PORT DIN3_PORT
#define DIO85_BIT DIN3_BIT
#define DIO85_AHB1EN DIN3_AHB1EN
#define DIO85_GPIO DIN3_GPIO
#endif
#if (defined(DIN4_PORT) && defined(DIN4_BIT))
#define DIN4 86
#define DIN4_AHB1EN (__rccgpioen__(DIN4_PORT))
#define DIN4_GPIO (__gpio__(DIN4_PORT))
#define DIO86 86
#define DIO86_PORT DIN4_PORT
#define DIO86_BIT DIN4_BIT
#define DIO86_AHB1EN DIN4_AHB1EN
#define DIO86_GPIO DIN4_GPIO
#endif
#if (defined(DIN5_PORT) && defined(DIN5_BIT))
#define DIN5 87
#define DIN5_AHB1EN (__rccgpioen__(DIN5_PORT))
#define DIN5_GPIO (__gpio__(DIN5_PORT))
#define DIO87 87
#define DIO87_PORT DIN5_PORT
#define DIO87_BIT DIN5_BIT
#define DIO87_AHB1EN DIN5_AHB1EN
#define DIO87_GPIO DIN5_GPIO
#endif
#if (defined(DIN6_PORT) && defined(DIN6_BIT))
#define DIN6 88
#define DIN6_AHB1EN (__rccgpioen__(DIN6_PORT))
#define DIN6_GPIO (__gpio__(DIN6_PORT))
#define DIO88 88
#define DIO88_PORT DIN6_PORT
#define DIO88_BIT DIN6_BIT
#define DIO88_AHB1EN DIN6_AHB1EN
#define DIO88_GPIO DIN6_GPIO
#endif
#if (defined(DIN7_PORT) && defined(DIN7_BIT))
#define DIN7 89
#define DIN7_AHB1EN (__rccgpioen__(DIN7_PORT))
#define DIN7_GPIO (__gpio__(DIN7_PORT))
#define DIO89 89
#define DIO89_PORT DIN7_PORT
#define DIO89_BIT DIN7_BIT
#define DIO89_AHB1EN DIN7_AHB1EN
#define DIO89_GPIO DIN7_GPIO
#endif
#if (defined(DIN8_PORT) && defined(DIN8_BIT))
#define DIN8 90
#define DIN8_AHB1EN (__rccgpioen__(DIN8_PORT))
#define DIN8_GPIO (__gpio__(DIN8_PORT))
#define DIO90 90
#define DIO90_PORT DIN8_PORT
#define DIO90_BIT DIN8_BIT
#define DIO90_AHB1EN DIN8_AHB1EN
#define DIO90_GPIO DIN8_GPIO
#endif
#if (defined(DIN9_PORT) && defined(DIN9_BIT))
#define DIN9 91
#define DIN9_AHB1EN (__rccgpioen__(DIN9_PORT))
#define DIN9_GPIO (__gpio__(DIN9_PORT))
#define DIO91 91
#define DIO91_PORT DIN9_PORT
#define DIO91_BIT DIN9_BIT
#define DIO91_AHB1EN DIN9_AHB1EN
#define DIO91_GPIO DIN9_GPIO
#endif
#if (defined(DIN10_PORT) && defined(DIN10_BIT))
#define DIN10 92
#define DIN10_AHB1EN (__rccgpioen__(DIN10_PORT))
#define DIN10_GPIO (__gpio__(DIN10_PORT))
#define DIO92 92
#define DIO92_PORT DIN10_PORT
#define DIO92_BIT DIN10_BIT
#define DIO92_AHB1EN DIN10_AHB1EN
#define DIO92_GPIO DIN10_GPIO
#endif
#if (defined(DIN11_PORT) && defined(DIN11_BIT))
#define DIN11 93
#define DIN11_AHB1EN (__rccgpioen__(DIN11_PORT))
#define DIN11_GPIO (__gpio__(DIN11_PORT))
#define DIO93 93
#define DIO93_PORT DIN11_PORT
#define DIO93_BIT DIN11_BIT
#define DIO93_AHB1EN DIN11_AHB1EN
#define DIO93_GPIO DIN11_GPIO
#endif
#if (defined(DIN12_PORT) && defined(DIN12_BIT))
#define DIN12 94
#define DIN12_AHB1EN (__rccgpioen__(DIN12_PORT))
#define DIN12_GPIO (__gpio__(DIN12_PORT))
#define DIO94 94
#define DIO94_PORT DIN12_PORT
#define DIO94_BIT DIN12_BIT
#define DIO94_AHB1EN DIN12_AHB1EN
#define DIO94_GPIO DIN12_GPIO
#endif
#if (defined(DIN13_PORT) && defined(DIN13_BIT))
#define DIN13 95
#define DIN13_AHB1EN (__rccgpioen__(DIN13_PORT))
#define DIN13_GPIO (__gpio__(DIN13_PORT))
#define DIO95 95
#define DIO95_PORT DIN13_PORT
#define DIO95_BIT DIN13_BIT
#define DIO95_AHB1EN DIN13_AHB1EN
#define DIO95_GPIO DIN13_GPIO
#endif
#if (defined(DIN14_PORT) && defined(DIN14_BIT))
#define DIN14 96
#define DIN14_AHB1EN (__rccgpioen__(DIN14_PORT))
#define DIN14_GPIO (__gpio__(DIN14_PORT))
#define DIO96 96
#define DIO96_PORT DIN14_PORT
#define DIO96_BIT DIN14_BIT
#define DIO96_AHB1EN DIN14_AHB1EN
#define DIO96_GPIO DIN14_GPIO
#endif
#if (defined(DIN15_PORT) && defined(DIN15_BIT))
#define DIN15 97
#define DIN15_AHB1EN (__rccgpioen__(DIN15_PORT))
#define DIN15_GPIO (__gpio__(DIN15_PORT))
#define DIO97 97
#define DIO97_PORT DIN15_PORT
#define DIO97_BIT DIN15_BIT
#define DIO97_AHB1EN DIN15_AHB1EN
#define DIO97_GPIO DIN15_GPIO
#endif
#if (defined(TX_PORT) && defined(TX_BIT))
#define TX 98
#define TX_AHB1EN (__rccgpioen__(TX_PORT))
#define TX_GPIO (__gpio__(TX_PORT))
#define DIO98 98
#define DIO98_PORT TX_PORT
#define DIO98_BIT TX_BIT
#define DIO98_AHB1EN TX_AHB1EN
#define DIO98_GPIO TX_GPIO
#endif
#if (defined(RX_PORT) && defined(RX_BIT))
#define RX 99
#define RX_AHB1EN (__rccgpioen__(RX_PORT))
#define RX_GPIO (__gpio__(RX_PORT))
#define DIO99 99
#define DIO99_PORT RX_PORT
#define DIO99_BIT RX_BIT
#define DIO99_AHB1EN RX_AHB1EN
#define DIO99_GPIO RX_GPIO
#endif
#if (defined(USB_DM_PORT) && defined(USB_DM_BIT))
#define USB_DM 100
#define USB_DM_AHB1EN (__rccgpioen__(USB_DM_PORT))
#define USB_DM_GPIO (__gpio__(USB_DM_PORT))
#define DIO100 100
#define DIO100_PORT USB_DM_PORT
#define DIO100_BIT USB_DM_BIT
#define DIO100_AHB1EN USB_DM_AHB1EN
#define DIO100_GPIO USB_DM_GPIO
#endif
#if (defined(USB_DP_PORT) && defined(USB_DP_BIT))
#define USB_DP 101
#define USB_DP_AHB1EN (__rccgpioen__(USB_DP_PORT))
#define USB_DP_GPIO (__gpio__(USB_DP_PORT))
#define DIO101 101
#define DIO101_PORT USB_DP_PORT
#define DIO101_BIT USB_DP_BIT
#define DIO101_AHB1EN USB_DP_AHB1EN
#define DIO101_GPIO USB_DP_GPIO
#endif

/**********************************************
 *	ISR on change inputs
 **********************************************/
#define EXTINT_A 0
#define EXTINT_B 1
#define EXTINT_C 2
#define EXTINT_D 3
#define EXTINT_E 4
#if (defined(STM32F401xB) || defined(STM32F401xC) || defined(STM32F401xE))
#define EXTINT_H 5
#else
#define EXTINT_F 5
#define EXTINT_G 6
#define EXTINT_H 7
#define EXTINT_I 8
#define EXTINT_J 9
#define EXTINT_K 10
#endif
#define _EXTINT(X) EXTINT_##X
#define EXTINT(X) _EXTINT(X)

#define EXTIRQ_0 EXTI0_IRQn
#define EXTIRQ_1 EXTI1_IRQn
#define EXTIRQ_2 EXTI2_IRQn
#define EXTIRQ_3 EXTI3_IRQn
#define EXTIRQ_4 EXTI4_IRQn
#define EXTIRQ_5 EXTI9_5_IRQn
#define EXTIRQ_6 EXTI9_5_IRQn
#define EXTIRQ_7 EXTI9_5_IRQn
#define EXTIRQ_8 EXTI9_5_IRQn
#define EXTIRQ_9 EXTI9_5_IRQn
#define EXTIRQ_10 EXTI15_10_IRQn
#define EXTIRQ_11 EXTI15_10_IRQn
#define EXTIRQ_12 EXTI15_10_IRQn
#define EXTIRQ_13 EXTI15_10_IRQn
#define EXTIRQ_14 EXTI15_10_IRQn
#define EXTIRQ_15 EXTI15_10_IRQn
#define _EXTIRQ(X) EXTIRQ_##X
#define EXTIRQ(X) _EXTIRQ(X)

#if (defined(LIMIT_X_ISR) && defined(LIMIT_X))
#define LIMIT_X_EXTIREG (LIMIT_X_BIT >> 2)
#define LIMIT_X_EXTIBITMASK (1 << LIMIT_X_BIT)
#define LIMIT_X_IRQ EXTIRQ(LIMIT_X_BIT)
#define LIMIT_X_EXTIVAL ((EXTINT(LIMIT_X_PORT)) << ((LIMIT_X_BIT & 0x03) << 2))
#define DIO52_EXTIREG LIMIT_X_EXTIREG
#define DIO52_EXTIVAL LIMIT_X_EXTIVAL
#define DIO52_IRQ LIMIT_X_IRQ
#define DIO52_EXTIBITMASK LIMIT_X_EXTIBITMASK
#else
#define LIMIT_X_EXTIMASK 0
#define LIMIT_X_EXTIBITMASK 0
#endif
#if (defined(LIMIT_Y_ISR) && defined(LIMIT_Y))
#define LIMIT_Y_EXTIREG (LIMIT_Y_BIT >> 2)
#define LIMIT_Y_EXTIBITMASK (1 << LIMIT_Y_BIT)
#define LIMIT_Y_IRQ EXTIRQ(LIMIT_Y_BIT)
#define LIMIT_Y_EXTIVAL ((EXTINT(LIMIT_Y_PORT)) << ((LIMIT_Y_BIT & 0x03) << 2))
#define DIO53_EXTIREG LIMIT_Y_EXTIREG
#define DIO53_EXTIVAL LIMIT_Y_EXTIVAL
#define DIO53_IRQ LIMIT_Y_IRQ
#define DIO53_EXTIBITMASK LIMIT_Y_EXTIBITMASK
#else
#define LIMIT_Y_EXTIMASK 0
#define LIMIT_Y_EXTIBITMASK 0
#endif
#if (defined(LIMIT_Z_ISR) && defined(LIMIT_Z))
#define LIMIT_Z_EXTIREG (LIMIT_Z_BIT >> 2)
#define LIMIT_Z_EXTIBITMASK (1 << LIMIT_Z_BIT)
#define LIMIT_Z_IRQ EXTIRQ(LIMIT_Z_BIT)
#define LIMIT_Z_EXTIVAL ((EXTINT(LIMIT_Z_PORT)) << ((LIMIT_Z_BIT & 0x03) << 2))
#define DIO54_EXTIREG LIMIT_Z_EXTIREG
#define DIO54_EXTIVAL LIMIT_Z_EXTIVAL
#define DIO54_IRQ LIMIT_Z_IRQ
#define DIO54_EXTIBITMASK LIMIT_Z_EXTIBITMASK
#else
#define LIMIT_Z_EXTIMASK 0
#define LIMIT_Z_EXTIBITMASK 0
#endif
#if (defined(LIMIT_X2_ISR) && defined(LIMIT_X2))
#define LIMIT_X2_EXTIREG (LIMIT_X2_BIT >> 2)
#define LIMIT_X2_EXTIBITMASK (1 << LIMIT_X2_BIT)
#define LIMIT_X2_IRQ EXTIRQ(LIMIT_X2_BIT)
#define LIMIT_X2_EXTIVAL ((EXTINT(LIMIT_X2_PORT)) << ((LIMIT_X2_BIT & 0x03) << 2))
#define DIO55_EXTIREG LIMIT_X2_EXTIREG
#define DIO55_EXTIVAL LIMIT_X2_EXTIVAL
#define DIO55_IRQ LIMIT_X2_IRQ
#define DIO55_EXTIBITMASK LIMIT_X2_EXTIBITMASK
#else
#define LIMIT_X2_EXTIMASK 0
#define LIMIT_X2_EXTIBITMASK 0
#endif
#if (defined(LIMIT_Y2_ISR) && defined(LIMIT_Y2))
#define LIMIT_Y2_EXTIREG (LIMIT_Y2_BIT >> 2)
#define LIMIT_Y2_EXTIBITMASK (1 << LIMIT_Y2_BIT)
#define LIMIT_Y2_IRQ EXTIRQ(LIMIT_Y2_BIT)
#define LIMIT_Y2_EXTIVAL ((EXTINT(LIMIT_Y2_PORT)) << ((LIMIT_Y2_BIT & 0x03) << 2))
#define DIO56_EXTIREG LIMIT_Y2_EXTIREG
#define DIO56_EXTIVAL LIMIT_Y2_EXTIVAL
#define DIO56_IRQ LIMIT_Y2_IRQ
#define DIO56_EXTIBITMASK LIMIT_Y2_EXTIBITMASK
#else
#define LIMIT_Y2_EXTIMASK 0
#define LIMIT_Y2_EXTIBITMASK 0
#endif
#if (defined(LIMIT_Z2_ISR) && defined(LIMIT_Z2))
#define LIMIT_Z2_EXTIREG (LIMIT_Z2_BIT >> 2)
#define LIMIT_Z2_EXTIBITMASK (1 << LIMIT_Z2_BIT)
#define LIMIT_Z2_IRQ EXTIRQ(LIMIT_Z2_BIT)
#define LIMIT_Z2_EXTIVAL ((EXTINT(LIMIT_Z2_PORT)) << ((LIMIT_Z2_BIT & 0x03) << 2))
#define DIO57_EXTIREG LIMIT_Z2_EXTIREG
#define DIO57_EXTIVAL LIMIT_Z2_EXTIVAL
#define DIO57_IRQ LIMIT_Z2_IRQ
#define DIO57_EXTIBITMASK LIMIT_Z2_EXTIBITMASK
#else
#define LIMIT_Z2_EXTIMASK 0
#define LIMIT_Z2_EXTIBITMASK 0
#endif
#if (defined(LIMIT_A_ISR) && defined(LIMIT_A))
#define LIMIT_A_EXTIREG (LIMIT_A_BIT >> 2)
#define LIMIT_A_EXTIBITMASK (1 << LIMIT_A_BIT)
#define LIMIT_A_IRQ EXTIRQ(LIMIT_A_BIT)
#define LIMIT_A_EXTIVAL ((EXTINT(LIMIT_A_PORT)) << ((LIMIT_A_BIT & 0x03) << 2))
#define DIO58_EXTIREG LIMIT_A_EXTIREG
#define DIO58_EXTIVAL LIMIT_A_EXTIVAL
#define DIO58_IRQ LIMIT_A_IRQ
#define DIO58_EXTIBITMASK LIMIT_A_EXTIBITMASK
#else
#define LIMIT_A_EXTIMASK 0
#define LIMIT_A_EXTIBITMASK 0
#endif
#if (defined(LIMIT_B_ISR) && defined(LIMIT_B))
#define LIMIT_B_EXTIREG (LIMIT_B_BIT >> 2)
#define LIMIT_B_EXTIBITMASK (1 << LIMIT_B_BIT)
#define LIMIT_B_IRQ EXTIRQ(LIMIT_B_BIT)
#define LIMIT_B_EXTIVAL ((EXTINT(LIMIT_B_PORT)) << ((LIMIT_B_BIT & 0x03) << 2))
#define DIO59_EXTIREG LIMIT_B_EXTIREG
#define DIO59_EXTIVAL LIMIT_B_EXTIVAL
#define DIO59_IRQ LIMIT_B_IRQ
#define DIO59_EXTIBITMASK LIMIT_B_EXTIBITMASK
#else
#define LIMIT_B_EXTIMASK 0
#define LIMIT_B_EXTIBITMASK 0
#endif
#if (defined(LIMIT_C_ISR) && defined(LIMIT_C))
#define LIMIT_C_EXTIREG (LIMIT_C_BIT >> 2)
#define LIMIT_C_EXTIBITMASK (1 << LIMIT_C_BIT)
#define LIMIT_C_IRQ EXTIRQ(LIMIT_C_BIT)
#define LIMIT_C_EXTIVAL ((EXTINT(LIMIT_C_PORT)) << ((LIMIT_C_BIT & 0x03) << 2))
#define DIO60_EXTIREG LIMIT_C_EXTIREG
#define DIO60_EXTIVAL LIMIT_C_EXTIVAL
#define DIO60_IRQ LIMIT_C_IRQ
#define DIO60_EXTIBITMASK LIMIT_C_EXTIBITMASK
#else
#define LIMIT_C_EXTIMASK 0
#define LIMIT_C_EXTIBITMASK 0
#endif
#if (defined(PROBE_ISR) && defined(PROBE))
#define PROBE_EXTIREG (PROBE_BIT >> 2)
#define PROBE_EXTIBITMASK (1 << PROBE_BIT)
#define PROBE_IRQ EXTIRQ(PROBE_BIT)
#define PROBE_EXTIVAL ((EXTINT(PROBE_PORT)) << ((PROBE_BIT & 0x03) << 2))
#define DIO61_EXTIREG PROBE_EXTIREG
#define DIO61_EXTIVAL PROBE_EXTIVAL
#define DIO61_IRQ PROBE_IRQ
#define DIO61_EXTIBITMASK PROBE_EXTIBITMASK
#else
#define PROBE_EXTIMASK 0
#define PROBE_EXTIBITMASK 0
#endif
#if (defined(ESTOP_ISR) && defined(ESTOP))
#define ESTOP_EXTIREG (ESTOP_BIT >> 2)
#define ESTOP_EXTIBITMASK (1 << ESTOP_BIT)
#define ESTOP_IRQ EXTIRQ(ESTOP_BIT)
#define ESTOP_EXTIVAL ((EXTINT(ESTOP_PORT)) << ((ESTOP_BIT & 0x03) << 2))
#define DIO62_EXTIREG ESTOP_EXTIREG
#define DIO62_EXTIVAL ESTOP_EXTIVAL
#define DIO62_IRQ ESTOP_IRQ
#define DIO62_EXTIBITMASK ESTOP_EXTIBITMASK
#else
#define ESTOP_EXTIMASK 0
#define ESTOP_EXTIBITMASK 0
#endif
#if (defined(SAFETY_DOOR_ISR) && defined(SAFETY_DOOR))
#define SAFETY_DOOR_EXTIREG (SAFETY_DOOR_BIT >> 2)
#define SAFETY_DOOR_EXTIBITMASK (1 << SAFETY_DOOR_BIT)
#define SAFETY_DOOR_IRQ EXTIRQ(SAFETY_DOOR_BIT)
#define SAFETY_DOOR_EXTIVAL ((EXTINT(SAFETY_DOOR_PORT)) << ((SAFETY_DOOR_BIT & 0x03) << 2))
#define DIO63_EXTIREG SAFETY_DOOR_EXTIREG
#define DIO63_EXTIVAL SAFETY_DOOR_EXTIVAL
#define DIO63_IRQ SAFETY_DOOR_IRQ
#define DIO63_EXTIBITMASK SAFETY_DOOR_EXTIBITMASK
#else
#define SAFETY_DOOR_EXTIMASK 0
#define SAFETY_DOOR_EXTIBITMASK 0
#endif
#if (defined(FHOLD_ISR) && defined(FHOLD))
#define FHOLD_EXTIREG (FHOLD_BIT >> 2)
#define FHOLD_EXTIBITMASK (1 << FHOLD_BIT)
#define FHOLD_IRQ EXTIRQ(FHOLD_BIT)
#define FHOLD_EXTIVAL ((EXTINT(FHOLD_PORT)) << ((FHOLD_BIT & 0x03) << 2))
#define DIO64_EXTIREG FHOLD_EXTIREG
#define DIO64_EXTIVAL FHOLD_EXTIVAL
#define DIO64_IRQ FHOLD_IRQ
#define DIO64_EXTIBITMASK FHOLD_EXTIBITMASK
#else
#define FHOLD_EXTIMASK 0
#define FHOLD_EXTIBITMASK 0
#endif
#if (defined(CS_RES_ISR) && defined(CS_RES))
#define CS_RES_EXTIREG (CS_RES_BIT >> 2)
#define CS_RES_EXTIBITMASK (1 << CS_RES_BIT)
#define CS_RES_IRQ EXTIRQ(CS_RES_BIT)
#define CS_RES_EXTIVAL ((EXTINT(CS_RES_PORT)) << ((CS_RES_BIT & 0x03) << 2))
#define DIO65_EXTIREG CS_RES_EXTIREG
#define DIO65_EXTIVAL CS_RES_EXTIVAL
#define DIO65_IRQ CS_RES_IRQ
#define DIO65_EXTIBITMASK CS_RES_EXTIBITMASK
#else
#define CS_RES_EXTIMASK 0
#define CS_RES_EXTIBITMASK 0
#endif
#if (defined(DIN0_ISR) && defined(DIN0))
#define DIN0_EXTIREG (DIN0_BIT >> 2)
#define DIN0_EXTIBITMASK (1 << DIN0_BIT)
#define DIN0_IRQ EXTIRQ(DIN0_BIT)
#define DIN0_EXTIVAL ((EXTINT(DIN0_PORT)) << ((DIN0_BIT & 0x03) << 2))
#define DIO82_EXTIREG DIN0_EXTIREG
#define DIO82_EXTIVAL DIN0_EXTIVAL
#define DIO82_IRQ DIN0_IRQ
#define DIO82_EXTIBITMASK DIN0_EXTIBITMASK
#else
#define DIN0_EXTIMASK 0
#define DIN0_EXTIBITMASK 0
#endif
#if (defined(DIN1_ISR) && defined(DIN1))
#define DIN1_EXTIREG (DIN1_BIT >> 2)
#define DIN1_EXTIBITMASK (1 << DIN1_BIT)
#define DIN1_IRQ EXTIRQ(DIN1_BIT)
#define DIN1_EXTIVAL ((EXTINT(DIN1_PORT)) << ((DIN1_BIT & 0x03) << 2))
#define DIO83_EXTIREG DIN1_EXTIREG
#define DIO83_EXTIVAL DIN1_EXTIVAL
#define DIO83_IRQ DIN1_IRQ
#define DIO83_EXTIBITMASK DIN1_EXTIBITMASK
#else
#define DIN1_EXTIMASK 0
#define DIN1_EXTIBITMASK 0
#endif
#if (defined(DIN2_ISR) && defined(DIN2))
#define DIN2_EXTIREG (DIN2_BIT >> 2)
#define DIN2_EXTIBITMASK (1 << DIN2_BIT)
#define DIN2_IRQ EXTIRQ(DIN2_BIT)
#define DIN2_EXTIVAL ((EXTINT(DIN2_PORT)) << ((DIN2_BIT & 0x03) << 2))
#define DIO84_EXTIREG DIN2_EXTIREG
#define DIO84_EXTIVAL DIN2_EXTIVAL
#define DIO84_IRQ DIN2_IRQ
#define DIO84_EXTIBITMASK DIN2_EXTIBITMASK
#else
#define DIN2_EXTIMASK 0
#define DIN2_EXTIBITMASK 0
#endif
#if (defined(DIN3_ISR) && defined(DIN3))
#define DIN3_EXTIREG (DIN3_BIT >> 2)
#define DIN3_EXTIBITMASK (1 << DIN3_BIT)
#define DIN3_IRQ EXTIRQ(DIN3_BIT)
#define DIN3_EXTIVAL ((EXTINT(DIN3_PORT)) << ((DIN3_BIT & 0x03) << 2))
#define DIO85_EXTIREG DIN3_EXTIREG
#define DIO85_EXTIVAL DIN3_EXTIVAL
#define DIO85_IRQ DIN3_IRQ
#define DIO85_EXTIBITMASK DIN3_EXTIBITMASK
#else
#define DIN3_EXTIMASK 0
#define DIN3_EXTIBITMASK 0
#endif
#if (defined(DIN4_ISR) && defined(DIN4))
#define DIN4_EXTIREG (DIN4_BIT >> 2)
#define DIN4_EXTIBITMASK (1 << DIN4_BIT)
#define DIN4_IRQ EXTIRQ(DIN4_BIT)
#define DIN4_EXTIVAL ((EXTINT(DIN4_PORT)) << ((DIN4_BIT & 0x03) << 2))
#define DIO86_EXTIREG DIN4_EXTIREG
#define DIO86_EXTIVAL DIN4_EXTIVAL
#define DIO86_IRQ DIN4_IRQ
#define DIO86_EXTIBITMASK DIN4_EXTIBITMASK
#else
#define DIN4_EXTIMASK 0
#define DIN4_EXTIBITMASK 0
#endif
#if (defined(DIN5_ISR) && defined(DIN5))
#define DIN5_EXTIREG (DIN5_BIT >> 2)
#define DIN5_EXTIBITMASK (1 << DIN5_BIT)
#define DIN5_IRQ EXTIRQ(DIN5_BIT)
#define DIN5_EXTIVAL ((EXTINT(DIN5_PORT)) << ((DIN5_BIT & 0x03) << 2))
#define DIO87_EXTIREG DIN5_EXTIREG
#define DIO87_EXTIVAL DIN5_EXTIVAL
#define DIO87_IRQ DIN5_IRQ
#define DIO87_EXTIBITMASK DIN5_EXTIBITMASK
#else
#define DIN5_EXTIMASK 0
#define DIN5_EXTIBITMASK 0
#endif
#if (defined(DIN6_ISR) && defined(DIN6))
#define DIN6_EXTIREG (DIN6_BIT >> 2)
#define DIN6_EXTIBITMASK (1 << DIN6_BIT)
#define DIN6_IRQ EXTIRQ(DIN6_BIT)
#define DIN6_EXTIVAL ((EXTINT(DIN6_PORT)) << ((DIN6_BIT & 0x03) << 2))
#define DIO88_EXTIREG DIN6_EXTIREG
#define DIO88_EXTIVAL DIN6_EXTIVAL
#define DIO88_IRQ DIN6_IRQ
#define DIO88_EXTIBITMASK DIN6_EXTIBITMASK
#else
#define DIN6_EXTIMASK 0
#define DIN6_EXTIBITMASK 0
#endif
#if (defined(DIN7_ISR) && defined(DIN7))
#define DIN7_EXTIREG (DIN7_BIT >> 2)
#define DIN7_EXTIBITMASK (1 << DIN7_BIT)
#define DIN7_IRQ EXTIRQ(DIN7_BIT)
#define DIN7_EXTIVAL ((EXTINT(DIN7_PORT)) << ((DIN7_BIT & 0x03) << 2))
#define DIO89_EXTIREG DIN7_EXTIREG
#define DIO89_EXTIVAL DIN7_EXTIVAL
#define DIO89_IRQ DIN7_IRQ
#define DIO89_EXTIBITMASK DIN7_EXTIBITMASK
#else
#define DIN7_EXTIMASK 0
#define DIN7_EXTIBITMASK 0
#endif

/**********************************************
 *	PWM pins
 **********************************************/
#if (defined(PWM0_CHANNEL) && defined(PWM0_TIMER) && defined(PWM0))
#if (PWM0_TIMER == 1 || (PWM0_TIMER >= 8 & PWM0_TIMER <= 11))
#define PWM0_ENREG RCC->APB2ENR
#define PWM0_APBEN __helper__(RCC_APB2ENR_TIM, PWM0_TIMER, EN)
#else
#define PWM0_ENREG RCC->APB1ENR
#define PWM0_APBEN __helper__(RCC_APB1ENR_TIM, PWM0_TIMER, EN)
#endif
#define PWM0_TIMREG (__tim__(PWM0_TIMER))
#ifndef PWM0_FREQ
#define PWM0_FREQ 1000
#endif
#if (PWM0_CHANNEL & 0x01)
#define PWM0_MODE 0x0064
#else
#define PWM0_MODE 0x6400
#endif
#if (PWM0_CHANNEL > 2)
#define PWM0_CCMREG CCMR2
#else
#define PWM0_CCMREG CCMR1
#endif
#if (PWM0_TIMER == 1)
#define PWM0_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM0_TIMER == 8)
#define PWM0_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM0_ENOUTPUT \
	{                 \
	}
#endif
#define PWM0_CCR __ccr__(PWM0_CHANNEL)
#define DIO20_TIMER PWM0_TIMER
#define DIO20_CHANNEL PWM0_CHANNEL
#define DIO20_ENREG PWM0_ENREG
#define DIO20_APBEN PWM0_APBEN
#define DIO20_TIMREG PWM0_TIMREG
#define DIO20_APBEN PWM0_APBEN
#define DIO20_FREQ PWM0_FREQ
#define DIO20_MODE PWM0_MODE
#define DIO20_CCMREG PWM0_CCMREG
#define DIO20_CCR PWM0_CCR
#define DIO20_ENOUTPUT PWM0_ENOUTPUT
#endif
#if (defined(PWM1_CHANNEL) && defined(PWM1_TIMER) && defined(PWM1))
#if (PWM1_TIMER == 1 || (PWM1_TIMER >= 8 & PWM1_TIMER <= 11))
#define PWM1_ENREG RCC->APB2ENR
#define PWM1_APBEN __helper__(RCC_APB2ENR_TIM, PWM1_TIMER, EN)
#else
#define PWM1_ENREG RCC->APB1ENR
#define PWM1_APBEN __helper__(RCC_APB1ENR_TIM, PWM1_TIMER, EN)
#endif
#define PWM1_TIMREG (__tim__(PWM1_TIMER))
#ifndef PWM1_FREQ
#define PWM1_FREQ 1000
#endif
#if (PWM1_CHANNEL & 0x01)
#define PWM1_MODE 0x0064
#else
#define PWM1_MODE 0x6400
#endif
#if (PWM1_CHANNEL > 2)
#define PWM1_CCMREG CCMR2
#else
#define PWM1_CCMREG CCMR1
#endif
#if (PWM1_TIMER == 1)
#define PWM1_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM1_TIMER == 8)
#define PWM1_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM1_ENOUTPUT \
	{                 \
	}
#endif
#define PWM1_CCR __ccr__(PWM1_CHANNEL)
#define DIO21_TIMER PWM1_TIMER
#define DIO21_CHANNEL PWM1_CHANNEL
#define DIO21_ENREG PWM1_ENREG
#define DIO21_APBEN PWM1_APBEN
#define DIO21_TIMREG PWM1_TIMREG
#define DIO21_APBEN PWM1_APBEN
#define DIO21_FREQ PWM1_FREQ
#define DIO21_MODE PWM1_MODE
#define DIO21_CCMREG PWM1_CCMREG
#define DIO21_CCR PWM1_CCR
#define DIO21_ENOUTPUT PWM1_ENOUTPUT
#endif
#if (defined(PWM2_CHANNEL) && defined(PWM2_TIMER) && defined(PWM2))
#if (PWM2_TIMER == 1 || (PWM2_TIMER >= 8 & PWM2_TIMER <= 11))
#define PWM2_ENREG RCC->APB2ENR
#define PWM2_APBEN __helper__(RCC_APB2ENR_TIM, PWM2_TIMER, EN)
#else
#define PWM2_ENREG RCC->APB1ENR
#define PWM2_APBEN __helper__(RCC_APB1ENR_TIM, PWM2_TIMER, EN)
#endif
#define PWM2_TIMREG (__tim__(PWM2_TIMER))
#ifndef PWM2_FREQ
#define PWM2_FREQ 1000
#endif
#if (PWM2_CHANNEL & 0x01)
#define PWM2_MODE 0x0064
#else
#define PWM2_MODE 0x6400
#endif
#if (PWM2_CHANNEL > 2)
#define PWM2_CCMREG CCMR2
#else
#define PWM2_CCMREG CCMR1
#endif
#if (PWM2_TIMER == 1)
#define PWM2_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM2_TIMER == 8)
#define PWM2_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM2_ENOUTPUT \
	{                 \
	}
#endif
#define PWM2_CCR __ccr__(PWM2_CHANNEL)
#define DIO22_TIMER PWM2_TIMER
#define DIO22_CHANNEL PWM2_CHANNEL
#define DIO22_ENREG PWM2_ENREG
#define DIO22_APBEN PWM2_APBEN
#define DIO22_TIMREG PWM2_TIMREG
#define DIO22_APBEN PWM2_APBEN
#define DIO22_FREQ PWM2_FREQ
#define DIO22_MODE PWM2_MODE
#define DIO22_CCMREG PWM2_CCMREG
#define DIO22_CCR PWM2_CCR
#define DIO22_ENOUTPUT PWM2_ENOUTPUT
#endif
#if (defined(PWM3_CHANNEL) && defined(PWM3_TIMER) && defined(PWM3))
#if (PWM3_TIMER == 1 || (PWM3_TIMER >= 8 & PWM3_TIMER <= 11))
#define PWM3_ENREG RCC->APB2ENR
#define PWM3_APBEN __helper__(RCC_APB2ENR_TIM, PWM3_TIMER, EN)
#else
#define PWM3_ENREG RCC->APB1ENR
#define PWM3_APBEN __helper__(RCC_APB1ENR_TIM, PWM3_TIMER, EN)
#endif
#define PWM3_TIMREG (__tim__(PWM3_TIMER))
#ifndef PWM3_FREQ
#define PWM3_FREQ 1000
#endif
#if (PWM3_CHANNEL & 0x01)
#define PWM3_MODE 0x0064
#else
#define PWM3_MODE 0x6400
#endif
#if (PWM3_CHANNEL > 2)
#define PWM3_CCMREG CCMR2
#else
#define PWM3_CCMREG CCMR1
#endif
#if (PWM3_TIMER == 1)
#define PWM3_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM3_TIMER == 8)
#define PWM3_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM3_ENOUTPUT \
	{                 \
	}
#endif
#define PWM3_CCR __ccr__(PWM3_CHANNEL)
#define DIO23_TIMER PWM3_TIMER
#define DIO23_CHANNEL PWM3_CHANNEL
#define DIO23_ENREG PWM3_ENREG
#define DIO23_APBEN PWM3_APBEN
#define DIO23_TIMREG PWM3_TIMREG
#define DIO23_APBEN PWM3_APBEN
#define DIO23_FREQ PWM3_FREQ
#define DIO23_MODE PWM3_MODE
#define DIO23_CCMREG PWM3_CCMREG
#define DIO23_CCR PWM3_CCR
#define DIO23_ENOUTPUT PWM3_ENOUTPUT
#endif
#if (defined(PWM4_CHANNEL) && defined(PWM4_TIMER) && defined(PWM4))
#if (PWM4_TIMER == 1 || (PWM4_TIMER >= 8 & PWM4_TIMER <= 11))
#define PWM4_ENREG RCC->APB2ENR
#define PWM4_APBEN __helper__(RCC_APB2ENR_TIM, PWM4_TIMER, EN)
#else
#define PWM4_ENREG RCC->APB1ENR
#define PWM4_APBEN __helper__(RCC_APB1ENR_TIM, PWM4_TIMER, EN)
#endif
#define PWM4_TIMREG (__tim__(PWM4_TIMER))
#ifndef PWM4_FREQ
#define PWM4_FREQ 1000
#endif
#if (PWM4_CHANNEL & 0x01)
#define PWM4_MODE 0x0064
#else
#define PWM4_MODE 0x6400
#endif
#if (PWM4_CHANNEL > 2)
#define PWM4_CCMREG CCMR2
#else
#define PWM4_CCMREG CCMR1
#endif
#if (PWM4_TIMER == 1)
#define PWM4_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM4_TIMER == 8)
#define PWM4_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM4_ENOUTPUT \
	{                 \
	}
#endif
#define PWM4_CCR __ccr__(PWM4_CHANNEL)
#define DIO24_TIMER PWM4_TIMER
#define DIO24_CHANNEL PWM4_CHANNEL
#define DIO24_ENREG PWM4_ENREG
#define DIO24_APBEN PWM4_APBEN
#define DIO24_TIMREG PWM4_TIMREG
#define DIO24_APBEN PWM4_APBEN
#define DIO24_FREQ PWM4_FREQ
#define DIO24_MODE PWM4_MODE
#define DIO24_CCMREG PWM4_CCMREG
#define DIO24_CCR PWM4_CCR
#define DIO24_ENOUTPUT PWM4_ENOUTPUT
#endif
#if (defined(PWM5_CHANNEL) && defined(PWM5_TIMER) && defined(PWM5))
#if (PWM5_TIMER == 1 || (PWM5_TIMER >= 8 & PWM5_TIMER <= 11))
#define PWM5_ENREG RCC->APB2ENR
#define PWM5_APBEN __helper__(RCC_APB2ENR_TIM, PWM5_TIMER, EN)
#else
#define PWM5_ENREG RCC->APB1ENR
#define PWM5_APBEN __helper__(RCC_APB1ENR_TIM, PWM5_TIMER, EN)
#endif
#define PWM5_TIMREG (__tim__(PWM5_TIMER))
#ifndef PWM5_FREQ
#define PWM5_FREQ 1000
#endif
#if (PWM5_CHANNEL & 0x01)
#define PWM5_MODE 0x0064
#else
#define PWM5_MODE 0x6400
#endif
#if (PWM5_CHANNEL > 2)
#define PWM5_CCMREG CCMR2
#else
#define PWM5_CCMREG CCMR1
#endif
#if (PWM5_TIMER == 1)
#define PWM5_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM5_TIMER == 8)
#define PWM5_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM5_ENOUTPUT \
	{                 \
	}
#endif
#define PWM5_CCR __ccr__(PWM5_CHANNEL)
#define DIO25_TIMER PWM5_TIMER
#define DIO25_CHANNEL PWM5_CHANNEL
#define DIO25_ENREG PWM5_ENREG
#define DIO25_APBEN PWM5_APBEN
#define DIO25_TIMREG PWM5_TIMREG
#define DIO25_APBEN PWM5_APBEN
#define DIO25_FREQ PWM5_FREQ
#define DIO25_MODE PWM5_MODE
#define DIO25_CCMREG PWM5_CCMREG
#define DIO25_CCR PWM5_CCR
#define DIO25_ENOUTPUT PWM5_ENOUTPUT
#endif
#if (defined(PWM6_CHANNEL) && defined(PWM6_TIMER) && defined(PWM6))
#if (PWM6_TIMER == 1 || (PWM6_TIMER >= 8 & PWM6_TIMER <= 11))
#define PWM6_ENREG RCC->APB2ENR
#define PWM6_APBEN __helper__(RCC_APB2ENR_TIM, PWM6_TIMER, EN)
#else
#define PWM6_ENREG RCC->APB1ENR
#define PWM6_APBEN __helper__(RCC_APB1ENR_TIM, PWM6_TIMER, EN)
#endif
#define PWM6_TIMREG (__tim__(PWM6_TIMER))
#ifndef PWM6_FREQ
#define PWM6_FREQ 1000
#endif
#if (PWM6_CHANNEL & 0x01)
#define PWM6_MODE 0x0064
#else
#define PWM6_MODE 0x6400
#endif
#if (PWM6_CHANNEL > 2)
#define PWM6_CCMREG CCMR2
#else
#define PWM6_CCMREG CCMR1
#endif
#if (PWM6_TIMER == 1)
#define PWM6_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM6_TIMER == 8)
#define PWM6_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM6_ENOUTPUT \
	{                 \
	}
#endif
#define PWM6_CCR __ccr__(PWM6_CHANNEL)
#define DIO26_TIMER PWM6_TIMER
#define DIO26_CHANNEL PWM6_CHANNEL
#define DIO26_ENREG PWM6_ENREG
#define DIO26_APBEN PWM6_APBEN
#define DIO26_TIMREG PWM6_TIMREG
#define DIO26_APBEN PWM6_APBEN
#define DIO26_FREQ PWM6_FREQ
#define DIO26_MODE PWM6_MODE
#define DIO26_CCMREG PWM6_CCMREG
#define DIO26_CCR PWM6_CCR
#define DIO26_ENOUTPUT PWM6_ENOUTPUT
#endif
#if (defined(PWM7_CHANNEL) && defined(PWM7_TIMER) && defined(PWM7))
#if (PWM7_TIMER == 1 || (PWM7_TIMER >= 8 & PWM7_TIMER <= 11))
#define PWM7_ENREG RCC->APB2ENR
#define PWM7_APBEN __helper__(RCC_APB2ENR_TIM, PWM7_TIMER, EN)
#else
#define PWM7_ENREG RCC->APB1ENR
#define PWM7_APBEN __helper__(RCC_APB1ENR_TIM, PWM7_TIMER, EN)
#endif
#define PWM7_TIMREG (__tim__(PWM7_TIMER))
#ifndef PWM7_FREQ
#define PWM7_FREQ 1000
#endif
#if (PWM7_CHANNEL & 0x01)
#define PWM7_MODE 0x0064
#else
#define PWM7_MODE 0x6400
#endif
#if (PWM7_CHANNEL > 2)
#define PWM7_CCMREG CCMR2
#else
#define PWM7_CCMREG CCMR1
#endif
#if (PWM7_TIMER == 1)
#define PWM7_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM7_TIMER == 8)
#define PWM7_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM7_ENOUTPUT \
	{                 \
	}
#endif
#define PWM7_CCR __ccr__(PWM7_CHANNEL)
#define DIO27_TIMER PWM7_TIMER
#define DIO27_CHANNEL PWM7_CHANNEL
#define DIO27_ENREG PWM7_ENREG
#define DIO27_APBEN PWM7_APBEN
#define DIO27_TIMREG PWM7_TIMREG
#define DIO27_APBEN PWM7_APBEN
#define DIO27_FREQ PWM7_FREQ
#define DIO27_MODE PWM7_MODE
#define DIO27_CCMREG PWM7_CCMREG
#define DIO27_CCR PWM7_CCR
#define DIO27_ENOUTPUT PWM7_ENOUTPUT
#endif
#if (defined(PWM8_CHANNEL) && defined(PWM8_TIMER) && defined(PWM8))
#if (PWM8_TIMER == 1 || (PWM8_TIMER >= 8 & PWM8_TIMER <= 11))
#define PWM8_ENREG RCC->APB2ENR
#define PWM8_APBEN __helper__(RCC_APB2ENR_TIM, PWM8_TIMER, EN)
#else
#define PWM8_ENREG RCC->APB1ENR
#define PWM8_APBEN __helper__(RCC_APB1ENR_TIM, PWM8_TIMER, EN)
#endif
#define PWM8_TIMREG (__tim__(PWM8_TIMER))
#ifndef PWM8_FREQ
#define PWM8_FREQ 1000
#endif
#if (PWM8_CHANNEL & 0x01)
#define PWM8_MODE 0x0064
#else
#define PWM8_MODE 0x6400
#endif
#if (PWM8_CHANNEL > 2)
#define PWM8_CCMREG CCMR2
#else
#define PWM8_CCMREG CCMR1
#endif
#if (PWM8_TIMER == 1)
#define PWM8_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM8_TIMER == 8)
#define PWM8_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM8_ENOUTPUT \
	{                 \
	}
#endif
#define PWM8_CCR __ccr__(PWM8_CHANNEL)
#define DIO28_TIMER PWM8_TIMER
#define DIO28_CHANNEL PWM8_CHANNEL
#define DIO28_ENREG PWM8_ENREG
#define DIO28_APBEN PWM8_APBEN
#define DIO28_TIMREG PWM8_TIMREG
#define DIO28_APBEN PWM8_APBEN
#define DIO28_FREQ PWM8_FREQ
#define DIO28_MODE PWM8_MODE
#define DIO28_CCMREG PWM8_CCMREG
#define DIO28_CCR PWM8_CCR
#define DIO28_ENOUTPUT PWM8_ENOUTPUT
#endif
#if (defined(PWM9_CHANNEL) && defined(PWM9_TIMER) && defined(PWM9))
#if (PWM9_TIMER == 1 || (PWM9_TIMER >= 8 & PWM9_TIMER <= 11))
#define PWM9_ENREG RCC->APB2ENR
#define PWM9_APBEN __helper__(RCC_APB2ENR_TIM, PWM9_TIMER, EN)
#else
#define PWM9_ENREG RCC->APB1ENR
#define PWM9_APBEN __helper__(RCC_APB1ENR_TIM, PWM9_TIMER, EN)
#endif
#define PWM9_TIMREG (__tim__(PWM9_TIMER))
#ifndef PWM9_FREQ
#define PWM9_FREQ 1000
#endif
#if (PWM9_CHANNEL & 0x01)
#define PWM9_MODE 0x0064
#else
#define PWM9_MODE 0x6400
#endif
#if (PWM9_CHANNEL > 2)
#define PWM9_CCMREG CCMR2
#else
#define PWM9_CCMREG CCMR1
#endif
#if (PWM9_TIMER == 1)
#define PWM9_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM9_TIMER == 8)
#define PWM9_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM9_ENOUTPUT \
	{                 \
	}
#endif
#define PWM9_CCR __ccr__(PWM9_CHANNEL)
#define DIO29_TIMER PWM9_TIMER
#define DIO29_CHANNEL PWM9_CHANNEL
#define DIO29_ENREG PWM9_ENREG
#define DIO29_APBEN PWM9_APBEN
#define DIO29_TIMREG PWM9_TIMREG
#define DIO29_APBEN PWM9_APBEN
#define DIO29_FREQ PWM9_FREQ
#define DIO29_MODE PWM9_MODE
#define DIO29_CCMREG PWM9_CCMREG
#define DIO29_CCR PWM9_CCR
#define DIO29_ENOUTPUT PWM9_ENOUTPUT
#endif
#if (defined(PWM10_CHANNEL) && defined(PWM10_TIMER) && defined(PWM10))
#if (PWM10_TIMER == 1 || (PWM10_TIMER >= 8 & PWM10_TIMER <= 11))
#define PWM10_ENREG RCC->APB2ENR
#define PWM10_APBEN __helper__(RCC_APB2ENR_TIM, PWM10_TIMER, EN)
#else
#define PWM10_ENREG RCC->APB1ENR
#define PWM10_APBEN __helper__(RCC_APB1ENR_TIM, PWM10_TIMER, EN)
#endif
#define PWM10_TIMREG (__tim__(PWM10_TIMER))
#ifndef PWM10_FREQ
#define PWM10_FREQ 1000
#endif
#if (PWM10_CHANNEL & 0x01)
#define PWM10_MODE 0x0064
#else
#define PWM10_MODE 0x6400
#endif
#if (PWM10_CHANNEL > 2)
#define PWM10_CCMREG CCMR2
#else
#define PWM10_CCMREG CCMR1
#endif
#if (PWM10_TIMER == 1)
#define PWM10_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM10_TIMER == 8)
#define PWM10_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM10_ENOUTPUT \
	{                  \
	}
#endif
#define PWM10_CCR __ccr__(PWM10_CHANNEL)
#define DIO30_TIMER PWM10_TIMER
#define DIO30_CHANNEL PWM10_CHANNEL
#define DIO30_ENREG PWM10_ENREG
#define DIO30_APBEN PWM10_APBEN
#define DIO30_TIMREG PWM10_TIMREG
#define DIO30_APBEN PWM10_APBEN
#define DIO30_FREQ PWM10_FREQ
#define DIO30_MODE PWM10_MODE
#define DIO30_CCMREG PWM10_CCMREG
#define DIO30_CCR PWM10_CCR
#define DIO30_ENOUTPUT PWM10_ENOUTPUT
#endif
#if (defined(PWM11_CHANNEL) && defined(PWM11_TIMER) && defined(PWM11))
#if (PWM11_TIMER == 1 || (PWM11_TIMER >= 8 & PWM11_TIMER <= 11))
#define PWM11_ENREG RCC->APB2ENR
#define PWM11_APBEN __helper__(RCC_APB2ENR_TIM, PWM11_TIMER, EN)
#else
#define PWM11_ENREG RCC->APB1ENR
#define PWM11_APBEN __helper__(RCC_APB1ENR_TIM, PWM11_TIMER, EN)
#endif
#define PWM11_TIMREG (__tim__(PWM11_TIMER))
#ifndef PWM11_FREQ
#define PWM11_FREQ 1000
#endif
#if (PWM11_CHANNEL & 0x01)
#define PWM11_MODE 0x0064
#else
#define PWM11_MODE 0x6400
#endif
#if (PWM11_CHANNEL > 2)
#define PWM11_CCMREG CCMR2
#else
#define PWM11_CCMREG CCMR1
#endif
#if (PWM11_TIMER == 1)
#define PWM11_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM11_TIMER == 8)
#define PWM11_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM11_ENOUTPUT \
	{                  \
	}
#endif
#define PWM11_CCR __ccr__(PWM11_CHANNEL)
#define DIO31_TIMER PWM11_TIMER
#define DIO31_CHANNEL PWM11_CHANNEL
#define DIO31_ENREG PWM11_ENREG
#define DIO31_APBEN PWM11_APBEN
#define DIO31_TIMREG PWM11_TIMREG
#define DIO31_APBEN PWM11_APBEN
#define DIO31_FREQ PWM11_FREQ
#define DIO31_MODE PWM11_MODE
#define DIO31_CCMREG PWM11_CCMREG
#define DIO31_CCR PWM11_CCR
#define DIO31_ENOUTPUT PWM11_ENOUTPUT
#endif
#if (defined(PWM12_CHANNEL) && defined(PWM12_TIMER) && defined(PWM12))
#if (PWM12_TIMER == 1 || (PWM12_TIMER >= 8 & PWM12_TIMER <= 11))
#define PWM12_ENREG RCC->APB2ENR
#define PWM12_APBEN __helper__(RCC_APB2ENR_TIM, PWM12_TIMER, EN)
#else
#define PWM12_ENREG RCC->APB1ENR
#define PWM12_APBEN __helper__(RCC_APB1ENR_TIM, PWM12_TIMER, EN)
#endif
#define PWM12_TIMREG (__tim__(PWM12_TIMER))
#ifndef PWM12_FREQ
#define PWM12_FREQ 1000
#endif
#if (PWM12_CHANNEL & 0x01)
#define PWM12_MODE 0x0064
#else
#define PWM12_MODE 0x6400
#endif
#if (PWM12_CHANNEL > 2)
#define PWM12_CCMREG CCMR2
#else
#define PWM12_CCMREG CCMR1
#endif
#if (PWM12_TIMER == 1)
#define PWM12_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM12_TIMER == 8)
#define PWM12_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM12_ENOUTPUT \
	{                  \
	}
#endif
#define PWM12_CCR __ccr__(PWM12_CHANNEL)
#define DIO32_TIMER PWM12_TIMER
#define DIO32_CHANNEL PWM12_CHANNEL
#define DIO32_ENREG PWM12_ENREG
#define DIO32_APBEN PWM12_APBEN
#define DIO32_TIMREG PWM12_TIMREG
#define DIO32_APBEN PWM12_APBEN
#define DIO32_FREQ PWM12_FREQ
#define DIO32_MODE PWM12_MODE
#define DIO32_CCMREG PWM12_CCMREG
#define DIO32_CCR PWM12_CCR
#define DIO32_ENOUTPUT PWM12_ENOUTPUT
#endif
#if (defined(PWM13_CHANNEL) && defined(PWM13_TIMER) && defined(PWM13))
#if (PWM13_TIMER == 1 || (PWM13_TIMER >= 8 & PWM13_TIMER <= 11))
#define PWM13_ENREG RCC->APB2ENR
#define PWM13_APBEN __helper__(RCC_APB2ENR_TIM, PWM13_TIMER, EN)
#else
#define PWM13_ENREG RCC->APB1ENR
#define PWM13_APBEN __helper__(RCC_APB1ENR_TIM, PWM13_TIMER, EN)
#endif
#define PWM13_TIMREG (__tim__(PWM13_TIMER))
#ifndef PWM13_FREQ
#define PWM13_FREQ 1000
#endif
#if (PWM13_CHANNEL & 0x01)
#define PWM13_MODE 0x0064
#else
#define PWM13_MODE 0x6400
#endif
#if (PWM13_CHANNEL > 2)
#define PWM13_CCMREG CCMR2
#else
#define PWM13_CCMREG CCMR1
#endif
#if (PWM13_TIMER == 1)
#define PWM13_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM13_TIMER == 8)
#define PWM13_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM13_ENOUTPUT \
	{                  \
	}
#endif
#define PWM13_CCR __ccr__(PWM13_CHANNEL)
#define DIO33_TIMER PWM13_TIMER
#define DIO33_CHANNEL PWM13_CHANNEL
#define DIO33_ENREG PWM13_ENREG
#define DIO33_APBEN PWM13_APBEN
#define DIO33_TIMREG PWM13_TIMREG
#define DIO33_APBEN PWM13_APBEN
#define DIO33_FREQ PWM13_FREQ
#define DIO33_MODE PWM13_MODE
#define DIO33_CCMREG PWM13_CCMREG
#define DIO33_CCR PWM13_CCR
#define DIO33_ENOUTPUT PWM13_ENOUTPUT
#endif
#if (defined(PWM14_CHANNEL) && defined(PWM14_TIMER) && defined(PWM14))
#if (PWM14_TIMER == 1 || (PWM14_TIMER >= 8 & PWM14_TIMER <= 11))
#define PWM14_ENREG RCC->APB2ENR
#define PWM14_APBEN __helper__(RCC_APB2ENR_TIM, PWM14_TIMER, EN)
#else
#define PWM14_ENREG RCC->APB1ENR
#define PWM14_APBEN __helper__(RCC_APB1ENR_TIM, PWM14_TIMER, EN)
#endif
#define PWM14_TIMREG (__tim__(PWM14_TIMER))
#ifndef PWM14_FREQ
#define PWM14_FREQ 1000
#endif
#if (PWM14_CHANNEL & 0x01)
#define PWM14_MODE 0x0064
#else
#define PWM14_MODE 0x6400
#endif
#if (PWM14_CHANNEL > 2)
#define PWM14_CCMREG CCMR2
#else
#define PWM14_CCMREG CCMR1
#endif
#if (PWM14_TIMER == 1)
#define PWM14_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM14_TIMER == 8)
#define PWM14_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM14_ENOUTPUT \
	{                  \
	}
#endif
#define PWM14_CCR __ccr__(PWM14_CHANNEL)
#define DIO34_TIMER PWM14_TIMER
#define DIO34_CHANNEL PWM14_CHANNEL
#define DIO34_ENREG PWM14_ENREG
#define DIO34_APBEN PWM14_APBEN
#define DIO34_TIMREG PWM14_TIMREG
#define DIO34_APBEN PWM14_APBEN
#define DIO34_FREQ PWM14_FREQ
#define DIO34_MODE PWM14_MODE
#define DIO34_CCMREG PWM14_CCMREG
#define DIO34_CCR PWM14_CCR
#define DIO34_ENOUTPUT PWM14_ENOUTPUT
#endif
#if (defined(PWM15_CHANNEL) && defined(PWM15_TIMER) && defined(PWM15))
#if (PWM15_TIMER == 1 || (PWM15_TIMER >= 8 & PWM15_TIMER <= 11))
#define PWM15_ENREG RCC->APB2ENR
#define PWM15_APBEN __helper__(RCC_APB2ENR_TIM, PWM15_TIMER, EN)
#else
#define PWM15_ENREG RCC->APB1ENR
#define PWM15_APBEN __helper__(RCC_APB1ENR_TIM, PWM15_TIMER, EN)
#endif
#define PWM15_TIMREG (__tim__(PWM15_TIMER))
#ifndef PWM15_FREQ
#define PWM15_FREQ 1000
#endif
#if (PWM15_CHANNEL & 0x01)
#define PWM15_MODE 0x0064
#else
#define PWM15_MODE 0x6400
#endif
#if (PWM15_CHANNEL > 2)
#define PWM15_CCMREG CCMR2
#else
#define PWM15_CCMREG CCMR1
#endif
#if (PWM15_TIMER == 1)
#define PWM15_ENOUTPUT ({ TIM1->BDTR |= (1 << 15); })
#elif (PWM15_TIMER == 8)
#define PWM15_ENOUTPUT ({ TIM8->BDTR |= (1 << 15); })
#else
#define PWM15_ENOUTPUT \
	{                  \
	}
#endif
#define PWM15_CCR __ccr__(PWM15_CHANNEL)
#define DIO35_TIMER PWM15_TIMER
#define DIO35_CHANNEL PWM15_CHANNEL
#define DIO35_ENREG PWM15_ENREG
#define DIO35_APBEN PWM15_APBEN
#define DIO35_TIMREG PWM15_TIMREG
#define DIO35_APBEN PWM15_APBEN
#define DIO35_FREQ PWM15_FREQ
#define DIO35_MODE PWM15_MODE
#define DIO35_CCMREG PWM15_CCMREG
#define DIO35_CCR PWM15_CCR
#define DIO35_ENOUTPUT PWM15_ENOUTPUT
#endif

/**********************************************
 *	Analog pins
 **********************************************/
#ifdef ANALOG0
#ifndef ANALOG0_CHANNEL
#define ANALOG0_CHANNEL -1
#endif
#define DIO66_CHANNEL ANALOG0_CHANNEL
#endif
#ifdef ANALOG1
#ifndef ANALOG1_CHANNEL
#define ANALOG1_CHANNEL -1
#endif
#define DIO67_CHANNEL ANALOG1_CHANNEL
#endif
#ifdef ANALOG2
#ifndef ANALOG2_CHANNEL
#define ANALOG2_CHANNEL -1
#endif
#define DIO68_CHANNEL ANALOG2_CHANNEL
#endif
#ifdef ANALOG3
#ifndef ANALOG3_CHANNEL
#define ANALOG3_CHANNEL -1
#endif
#define DIO69_CHANNEL ANALOG3_CHANNEL
#endif
#ifdef ANALOG4
#ifndef ANALOG4_CHANNEL
#define ANALOG4_CHANNEL -1
#endif
#define DIO70_CHANNEL ANALOG4_CHANNEL
#endif
#ifdef ANALOG5
#ifndef ANALOG5_CHANNEL
#define ANALOG5_CHANNEL -1
#endif
#define DIO71_CHANNEL ANALOG5_CHANNEL
#endif
#ifdef ANALOG6
#ifndef ANALOG6_CHANNEL
#define ANALOG6_CHANNEL -1
#endif
#define DIO72_CHANNEL ANALOG6_CHANNEL
#endif
#ifdef ANALOG7
#ifndef ANALOG7_CHANNEL
#define ANALOG7_CHANNEL -1
#endif
#define DIO73_CHANNEL ANALOG7_CHANNEL
#endif
#ifdef ANALOG8
#ifndef ANALOG8_CHANNEL
#define ANALOG8_CHANNEL -1
#endif
#define DIO74_CHANNEL ANALOG8_CHANNEL
#endif
#ifdef ANALOG9
#ifndef ANALOG9_CHANNEL
#define ANALOG9_CHANNEL -1
#endif
#define DIO75_CHANNEL ANALOG9_CHANNEL
#endif
#ifdef ANALOG10
#ifndef ANALOG10_CHANNEL
#define ANALOG10_CHANNEL -1
#endif
#define DIO76_CHANNEL ANALOG10_CHANNEL
#endif
#ifdef ANALOG11
#ifndef ANALOG11_CHANNEL
#define ANALOG11_CHANNEL -1
#endif
#define DIO77_CHANNEL ANALOG11_CHANNEL
#endif
#ifdef ANALOG12
#ifndef ANALOG12_CHANNEL
#define ANALOG12_CHANNEL -1
#endif
#define DIO78_CHANNEL ANALOG12_CHANNEL
#endif
#ifdef ANALOG13
#ifndef ANALOG13_CHANNEL
#define ANALOG13_CHANNEL -1
#endif
#define DIO79_CHANNEL ANALOG13_CHANNEL
#endif
#ifdef ANALOG14
#ifndef ANALOG14_CHANNEL
#define ANALOG14_CHANNEL -1
#endif
#define DIO80_CHANNEL ANALOG14_CHANNEL
#endif
#ifdef ANALOG15
#ifndef ANALOG15_CHANNEL
#define ANALOG15_CHANNEL -1
#endif
#define DIO81_CHANNEL ANALOG15_CHANNEL
#endif

// COM registers
#if (INTERFACE == INTERFACE_USART)
// this MCU does not work well with both TX and RX interrupt
// this forces the sync TX method to fix communication
//  #define ENABLE_SYNC_TX
#if (COM_PORT < 4 || COM_PORT == 6)
#define COM_USART __usart__(COM_PORT)
#define COM_IRQ __helper__(USART, COM_PORT, _IRQn)
#if (!defined(ENABLE_SYNC_TX) || !defined(ENABLE_SYNC_RX))
#define mcu_serial_isr __helper__(USART, COM_PORT, _IRQHandler)
#endif
#define COM_OUTREG (COM_USART)->DR
#define COM_INREG (COM_USART)->DR
#if (COM_PORT == 1 || COM_PORT == 6)
#define COM_APB APB2ENR
#define COM_APBEN __helper__(RCC_APB2ENR_USART, COM_PORT, EN)
#else
#define COM_APB APB1ENR
#define COM_APBEN __helper__(RCC_APB1ENR_USART, COM_PORT, EN)
#endif
#else
#define COM_USART __uart__(COM_PORT)
#define COM_IRQ __helper__(UART, COM_PORT, _IRQn)
#if (!defined(ENABLE_SYNC_TX) || !defined(ENABLE_SYNC_RX))
#define mcu_serial_isr __helper__(UART, COM_PORT, _IRQHandler)
#endif
#define COM_APB APB1ENR
#define COM_APBEN __helper__(RCC_APB1ENR_, COM_UART, EN)
#define COM_OUTREG (COM_USART)->DR
#define COM_INREG (COM_USART)->DR
#endif

// remmaping and pin checking
//  USART	TX	RX	APB	APB2ENR	REMAP
//  1	A9	A10	APB2ENR	RCC_APB2ENR_USART1EN	0
//  1	B6	B7	APB2ENR	RCC_APB2ENR_USART1EN	1
//  2	A2	A3	APB1ENR	RCC_APB1ENR_USART2EN	0
//  2	D5	D6	APB1ENR	RCC_APB1ENR_USART2EN	1
//  3	B10	B11	APB1ENR	RCC_APB1ENR_USART3EN	0
//  3	C10	C11	APB1ENR	RCC_APB1ENR_USART3EN	1
//  3	D8	D9	APB1ENR	RCC_APB1ENR_USART3EN	3
//  4	C10	C11	APB1ENR	RCC_APB1ENR_UART4EN	x
//  5	C12	D2	APB1ENR	RCC_APB1ENR_UART5EN	x
#if ((COM_PORT == 1) && (TX_BIT == 9) && (RX_BIT == 10) && (TX_PORT == A) && (RX_PORT == A))
#elif ((COM_PORT == 1) && (TX_BIT == 6) && (RX_BIT == 7) && (TX_PORT == B) && (RX_PORT == B))
#define COM_REMAP AFIO_MAPR_USART1_REMAP
#elif ((COM_PORT == 2) && (TX_BIT == 2) && (RX_BIT == 3) && (TX_PORT == A) && (RX_PORT == A))
#elif ((COM_PORT == 2) && (TX_BIT == 5) && (RX_BIT == 6) && (TX_PORT == D) && (RX_PORT == D))
#define COM_REMAP AFIO_MAPR_USART2_REMAP
#elif ((COM_PORT == 3) && (TX_BIT == 10) && (RX_BIT == 11) && (TX_PORT == B) && (RX_PORT == B))
#elif ((COM_PORT == 3) && (TX_BIT == 10) && (RX_BIT == 11) && (TX_PORT == C) && (RX_PORT == C))
#define COM_REMAP AFIO_MAPR_USART3_REMAP_PARTIALREMAP
#elif ((COM_PORT == 3) && (TX_BIT == 8) && (RX_BIT == 9) && (TX_PORT == D) && (RX_PORT == D))
#define COM_REMAP AFIO_MAPR_USART3_REMAP_FULLREMAP
#elif ((COM_PORT == 4) && (TX_BIT == 10) && (RX_BIT == 11) && (TX_PORT == C) && (RX_PORT == C))
#elif ((COM_PORT == 5) && (TX_BIT == 12) && (RX_BIT == 2) && (TX_PORT == C) && (RX_PORT == D))
#else
#error "USART/UART pin configuration not supported"
#endif
#endif

/*#define UCSRB __ucsrbreg__(COM_NUMBER)
#define UCSRA __ucsrareg__(COM_NUMBER)
#define UDRIE __udriereg__(COM_NUMBER)
#define U2X __u2xreg__(COM_NUMBER)
#define UBRRH __ubrrhreg__(COM_NUMBER)
#define UBRRL __ubrrlreg__(COM_NUMBER)
#define RXEN __rxenreg__(COM_NUMBER)
#define TXEN __txenreg__(COM_NUMBER)
#define RXCIE __rxciereg__(COM_NUMBER)
#define UDRE __udrereg__(COM_NUMBER)
#define RXC __rxcreg__(COM_NUMBER)
*/

// Timer registers
#ifndef ITP_TIMER
#define ITP_TIMER 2
#endif
#define mcu_timer_isr __helper__(TIM, ITP_TIMER, _IRQHandler)
#define TIMER_REG __helper__(TIM, ITP_TIMER, )
#if (ITP_TIMER == 1 || (ITP_TIMER >= 8 & ITP_TIMER <= 11))
#define TIMER_ENREG APB2ENR
#define TIMER_RESETREG APB1RSTR
#define TIMER_APB __helper__(RCC_APB2ENR_TIM, ITP_TIMER, EN)
#define TIMER_IRQ __helper__(TIM, ITP_TIMER, _UP_IRQn)
#else
#define TIMER_ENREG APB1ENR
#define TIMER_RESETREG APB1RSTR
#define TIMER_APB __helper__(RCC_APB1ENR_TIM, ITP_TIMER, EN)
#define TIMER_IRQ __helper__(TIM, ITP_TIMER, _IRQn)
#endif

#define __indirect__ex__(X, Y) DIO##X##_##Y
#define __indirect__(X, Y) __indirect__ex__(X, Y)

#ifndef BYTE_OPS
#define BYTE_OPS
// Set bit y in byte x
#define SETBIT(x, y) ((x) |= (1 << (y)))
// Clear bit y in byte x
#define CLEARBIT(x, y) ((x) &= ~(1 << (y)))
// Check bit y in byte x
#define CHECKBIT(x, y) ((x) & (1 << (y)))
// Toggle bit y in byte x
#define TOGGLEBIT(x, y) ((x) ^= (1 << (y)))
// Set byte y in byte x
#define SETFLAG(x, y) ((x) |= (y))
// Clear byte y in byte x
#define CLEARFLAG(x, y) ((x) &= ~(y))
// Check byte y in byte x
#define CHECKFLAG(x, y) ((x) & (y))
// Toggle byte y in byte x
#define TOGGLEFLAG(x, y) ((x) ^= (y))
#endif

#define mcu_get_input(diopin) (CHECKBIT(__indirect__(diopin, GPIO)->IDR, __indirect__(diopin, BIT)))
#define mcu_get_output(diopin) (CHECKBIT(__indirect__(diopin, GPIO)->ODR, __indirect__(diopin, BIT)))
#define mcu_set_output(diopin) (__indirect__(diopin, GPIO)->BSRR = (1U << __indirect__(diopin, BIT)))
#define mcu_clear_output(diopin) (__indirect__(diopin, GPIO)->BSRR = ((1U << 16) << __indirect__(diopin, BIT)))
#define mcu_toggle_output(diopin) (TOGGLEBIT(__indirect__(diopin, GPIO)->ODR, __indirect__(diopin, BIT)))
#define mcu_set_pwm(diopin, pwmvalue)                                                                                                           \
	{                                                                                                                                           \
		__indirect__(diopin, TIMREG)->__indirect__(diopin, CCR) = (uint16_t)((((uint32_t)__indirect__(diopin, TIMREG)->ARR) * pwmvalue) / 255); \
	}
#define mcu_get_pwm(diopin) ((uint8_t)((((uint32_t)__indirect__(diopin, TIMREG)->__indirect__(diopin, CCR)) * 255) / ((uint32_t)__indirect__(diopin, TIMREG)->ARR)))

#define mcu_get_analog(diopin) (                    \
	{                                               \
		ADC1->SQR3 = __indirect__(diopin, CHANNEL); \
		ADC1->CR2 |= ADC_CR2_SWSTART;               \
		ADC1->CR2 &= ~ADC_CR2_SWSTART;              \
		while (!(ADC1->SR & ADC_SR_EOC))            \
			;                                       \
		ADC1->SR &= ~ADC_SR_EOC;                    \
		(0xFF & (ADC1->DR >> 4));                   \
	})
#ifdef PROBE
#ifdef PROBE_ISR
#define mcu_enable_probe_isr() SETBIT(EXTI->IMR, PROBE_BIT)
#define mcu_disable_probe_isr() CLEARBIT(EXTI->IMR, PROBE_BIT)
#else
#define mcu_enable_probe_isr()
#define mcu_disable_probe_isr()
#endif
#endif

	extern volatile bool stm32_global_isr_enabled;
#define mcu_enable_global_isr() (        \
	{                                    \
		__enable_irq();                  \
		stm32_global_isr_enabled = true; \
	})
#define mcu_disable_global_isr() (        \
	{                                     \
		stm32_global_isr_enabled = false; \
		__disable_irq();                  \
	})
#define mcu_get_global_isr() ({ stm32_global_isr_enabled; })

// #ifdef COM_PORT
// #ifndef ENABLE_SYNC_TX
// #define mcu_enable_tx_isr() (COM_USART->CR1 |= (USART_CR1_TXEIE))
// #define mcu_disable_tx_isr() (COM_USART->CR1 &= ~(USART_CR1_TXEIE))
// #else
// #define mcu_enable_tx_isr()
// #define mcu_disable_tx_isr()
// #endif
// #else
// #define mcu_enable_tx_isr()
// #define mcu_disable_tx_isr()
// #endif
#if (INTERFACE == INTERFACE_USART)
#define mcu_rx_ready() (COM_USART->SR & USART_SR_RXNE)
#define mcu_tx_ready() (COM_USART->SR & USART_SR_TXE)
#elif (INTERFACE == INTERFACE_USB)
#define mcu_rx_ready() tud_cdc_n_available(0)
#define mcu_tx_ready() tud_cdc_n_write_available(0)
#endif

#define GPIO_RESET 0x3U
#define GPIO_INPUT 0x0U
#define GPIO_OUTPUT 0x1U
#define GPIO_AF 0x2U
#define GPIO_ANALOG 0x3U

#define GPIO_IN_FLOAT 0x4U
#define GPIO_IN_PUP 0x8U
#define GPIO_IN_ANALOG 0 // not needed after reseting bits

#define GPIO_IN_PULLUP 0x1U

#ifdef __cplusplus
}
#endif

#endif
